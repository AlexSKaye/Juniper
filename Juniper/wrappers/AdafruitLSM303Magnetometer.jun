module AdafruitLSM303Magnetometer
open(Vector, Time)

// The p : ptr should be a Adafruit_LSM303_Mag_Unified C++ object
alias magnetometer = { p : ptr, offset : vector<float, 3>, scale : vector<float, 3> }
alias magnetometerState = { timeState : timerState,
                            latchState : vector<float, 3> }

let state : magnetometerState = {
    timeState := Time:state,
    latchState := Vector:zero()
}

fun make(p : ptr, minVals : vector<float, 3>, maxVals : vector<float, 3>) : magnetometer = {
    let minX = minVals[Vector:x]
    let minY = minVals[Vector:y]
    let minZ = minVals[Vector:z]
    let maxX = maxVals[Vector:x]
    let maxY = maxVals[Vector:y]
    let maxZ = maxVals[Vector:z]
    let offset = [(minX + maxX)/-2.0, (minY + maxY)/-2.0, (minZ + maxZ)/-2.0]
    let scale = [2.0/(maxX - minX), 2.0/(maxY - minY), 2.0/(maxZ - minZ)]
    { p := p, offset := offset, scale := scale }
}

fun makeCustomTransform(p : ptr, offset : vector<float, 3>, scale : vector<float, 3>) : magnetometer = {
    { p := p,
      offset := offset,
      scale := scale }
}

fun begin(mag : magnetometer) : unit = {
    let p = mag.p
    #((Adafruit_LSM303_Mag_Unified*) p)->begin();#
}

fun read(mag : magnetometer) : vector<float, 3> = {
    let p = mag.p
    let mut x = 0
    let mut y = 0
    let mut z = 0
    #
    sensors_event_t event;
    ((Adafruit_LSM303_Mag_Unified*) p)->getEvent(&event);
    x = event.magnetic.x;
    y = event.magnetic.y;
    z = event.magnetic.z;
    #
    Vector:multiply(mag.scale, Vector:add([x, y, z], mag.offset))
}

fun getSignal(updateInterval : uint32,
              mag            : magnetometer,
              inout state    : magnetometerState) : sig<vector<float, 3>> =
    Time:every(updateInterval, inout state.timeState) |>
    Signal:map((t) => read(mag)) |>
    Signal:latch(inout state.latchState)
