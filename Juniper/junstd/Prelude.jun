module Prelude

/*
    Interface: Prelude
*/

/*
    Type: maybe

    The maybe type encapsulates an optional value. A value of type
    maybe<a> either contains a value of type a (represented as just<a>),
    or it is empty (represented as nothing<a>).

    | maybe<a>

    Constructors:
        - <just> (a)
        - <nothing> ()
*/
/*
    Function: just

    Type Signature:
    | (||)(a) -> maybe<a>
*/
/*
    Function: nothing

    Type signature:
    | (||)() -> maybe<a>
*/
type maybe<a> = just(a)
              | nothing()

/*
    Type: either

    The either type represents values with two possibilities. A value of type
    A value of type either<a,b> is either left a or right b.

    | either<a,b>

    Constructors:
        - <left> (a)
        - <right> (b)
*/
/*
    Function: left

    Type signature:
    | (a) -> either<a,b>
*/
/*
    Function: right

    Type signature:
    | (||)(b) -> either<a, b>
*/
type either<a,b> = left(a)
                 | right(b)

/*
    Type: alias list

    The list record type represents an ordered series of elements of a given
    length.

    | alias list<a; n> = { data : a[n]; length : uint32 }

    Members:
        data : a[n] - The internal array used to store the elements.
        length : uint32 - The length of the list
*/
alias list<a; n> = { data : a[n]; length : uint32 }

/*
    Type: alias charlist

    The charlist alias represents a list of extended ASCII characters at most
    length n (this does not include the final null byte). To get the length
    of the string not including the null byte, use CharList:length.

    | alias charlist<;n> = list<uint8;n+1>

    Members:
        data : uint8[n+1]
        length : uint32
*/
alias charlist<;n> = list<uint8;n+1>

/*
    Type: sig

    The signal type encapsulates the concept of a signal. At any point in time,
    a signal may having nothing travelling through it, or something travelling
    through it.

    | sig<a>

    Constructors:
        - <signal> (maybe<a>)
*/
/*
    Function: signal

    Type signature:
    | (||)(maybe<a>) -> sig<a>
*/
type sig<a> = signal(maybe<a>)

/*
    Function: extractptr

    Extracts the contained rawpointer from a pointer.

    Type signature:
    | (||)(pointer) -> rawpointer

    Parameters:
        p : pointer - The pointer to extract the rawpointer from
    
    Returns:
        The extracted rawpointer
*/
fun extractptr(p : pointer) : rawpointer = (
    var ret : rawpointer;
    #ret = p.get()->get();#;
    ret
)

/*
    Function: compose

    Composes two functions together.

    Type signature:
    | (||)((closureF)(b) -> c, (closureG)(a) -> b) -> ((|f : (closureF)(b) -> c; g : (closureG)(a) -> b|)(a) -> c)

    Parameters:
        f : (closureF)(b) -> c - The second function to compose
        g : (closureG)(a) -> b - The first function to compose

    Returns:
        A composed function equivalent to f(g(x))
*/
fun compose(f : (closureF)(b) -> c, g : (closureG)(a) -> b) : (|f : (closureF)(b) -> c; g : (closureG)(a) -> b|)(a) -> c =
    fn (x : a) : c -> f(g(x)) end

/*
    Function: curry

    Curries a function with an argument arity of 2.

    Type signature:
    | (||)((closure)(a, b) -> c) -> ((|f : (closure)(a, b) -> c|)(a) -> (|valueA : a; f : (closure)(a, b) -> c|)(b) -> c)

    Parameters:
        f : (closure)(a, b) -> c - The function to curry.

    Returns:
        A curried function
*/
fun curry(f : (closure)(a, b) -> c) : (|f : (closure)(a, b) -> c|)(a) -> (|valueA : a; f : (closure)(a, b) -> c|)(b) -> c =
    fn (valueA : a) ->
        fn (valueB : b) : c ->
            f(valueA, valueB)
        end
    end

/*
    Function: uncurrcy

    Uncurries a function with an argument arity of 2.

    Type signature:
    | (||)((closureA)(a) -> (closureB)(b) -> c) -> ((|f : (closureA)(a) -> (closureB)(b) -> c|)(a, b) -> c)

    Parameters:
        f : (closureA)(a) -> (closureB)(b) -> c - The function to uncurry.

    Returns:
        A uncurried function
*/
fun uncurry(f : (closureA)(a) -> (closureB)(b) -> c) : (|f : (closureA)(a) -> (closureB)(b) -> c|)(a, b) -> c =
    fn (valueA, valueB) ->
        f(valueA)(valueB)
    end

/*
    Function: curry3

    Curries a function with an argument arity of 3.

    Type signature:
    | (||)((closureF)(a, b, c) -> d) -> ((|f : (closureF)(a, b, c) -> d|)(a) -> (|f : (closureF)(a, b, c) -> d; valueA : a|)(b) -> (|f : (closureF)(a, b, c) -> d; valueA : a; valueB : b|)(c) -> d)

    Parameters:
        f : (closureF)(a, b, c) -> d - The function to curry.

    Returns:
        A curried function
*/
fun curry3(f : (closureF)(a, b, c) -> d) : (|f : (closureF)(a, b, c) -> d|)(a) -> (|f : (closureF)(a, b, c) -> d; valueA : a|)(b) -> (|f : (closureF)(a, b, c) -> d; valueA : a; valueB : b|)(c) -> d =
    fn (valueA : a) ->
        fn (valueB : b) ->
            fn (valueC : c) ->
                f(valueA, valueB, valueC)
            end
        end
    end

/*
    Function: uncurry3

    Uncurries a function with an argument arity of 3.

    Type signature:
    | (||)((closureA)(a) -> (closureB)(b) -> (closureC)(c) -> d) -> ((|f : (closureA)(a) -> (closureB)(b) -> (closureC)(c) -> d|)(a, b, c) -> d)

    Parameters:
        f : (closureA)(a) -> (closureB)(b) -> (closureC)(c) -> d - The function to uncurry

    Returns:
        An uncurried function
*/
fun uncurry3(f : (closureA)(a) -> (closureB)(b) -> (closureC)(c) -> d) : (|f : (closureA)(a) -> (closureB)(b) -> (closureC)(c) -> d|)(a, b, c) -> d =
    fn (valueA, valueB, valueC) ->
        f(valueA)(valueB)(valueC)
    end

/*
    Function: eq

    A function representation of the equality operator

    Type signature:
    | (||)(a, a) -> bool

    Parameters:
        x : a - The first value to compare
        y : b - The second value to compare

    Returns:
        True if the values are equivalent, false otherwise.
*/
fun eq(x : a, y : a) : bool =
    x == y

/*
    Function: neq

    A function representation of the inequality operator

    Type signature:
    | (||)(a, a) -> bool

    Parameters:
        x : a - The first value to compare
        y : b - The second value to compare

    Returns:
        False if the values are equivalent, true otherwise.
*/
fun neq(x, y) =
    x != y

/*
    Function: gt

    A function representation of the greater than operator

    Type signature:
    | (||)(a, b) -> bool where a : num, b : num

    Parameters:
        x : a - The first value to compare
        y : b - The second value to compare

    Returns:
        True if x > y, false otherwise.
*/
fun gt(x, y) =
    x > y

/*
    Function: geq

    A function representation of the greater than or equal operator

    Type signature:
    | (||)(a, b) -> bool where a : num, b : num

    Parameters:
        x : a - The first value to compare
        y : b - The second value to compare

    Returns:
        True if x >= y, false otherwise.
*/
fun geq(x, y) =
    x >= y

/*
    Function: lt

    A function representation of the less than operator

    Type signature:
    | (||)(a, b) -> bool where a : num, b : num

    Parameters:
        x : a - The first value to compare
        y : b - The second value to compare

    Returns:
        True if x < y, false otherwise.
*/
fun lt(x, y) =
    x < y

/*
    Function: leq

    A function representation of the less than or equal operator

    Type signature:
    | (||)(a, b) -> bool where a : num, b : num

    Parameters:
        x : a - The first value to compare
        y : b - The second value to compare

    Returns:
        True if x <= y, false otherwise.
*/
fun leq(x, y) =
    x <= y

/*
    Function: notf

    A function representation of the not operator

    Type signature:
    | (||)(bool) -> bool

    Parameters:
        x : bool - The value to take the logical inverse of

    Returns:
        The logical inverse of x
*/
fun notf(x) =
    !x

/*
    Function: andf

    A function representation of the && operator

    Type signature:
    | (||)(bool, bool) -> bool

    Parameters:
        x : bool - The first boolean value
        y : bool - The second boolean value

    Returns:
        x && y
*/
fun andf(x, y) =
    x && y

/*
    Function: orf

    A function representation of the or operator

    Type signature:
    | (||)(bool, bool) -> bool

    Parameters:
        x : bool - The first boolean value
        y : bool - The second boolean value

    Returns:
        x or y
*/
fun orf(x, y) =
    x || y

/*
    FunctionL apply

    Applies a value to the given function

    Type signature:
    | (||)((closure)(a) -> b, a) -> b

    Parameters:
        f : (closure)(a) -> b - The function to apply
        x : a - The value to pass to the function

    Returns:
        The result of x applied to f
*/
fun apply(f : (closure)(a) -> b, x : a) : b =
    f(x)

/*
    Function: apply2

    Applies a tuple of values to the given function

    Type signature:
    | (||)((closure)(a,b) -> c, a*b) -> c

    Parameters:
        f : (closure)(a,b) -> c - The function to apply
        tup : a*b - The values to pass to the function

    Returns:
        The result of the values held in the tuple applied to f
*/
fun apply2(f : (closure)(a, b) -> c, tup : a*b) : c = (
    let (a, b) = tup;
    f(a, b)
)

/*
    Function: apply3

    Applies a tuple of values to the given function

    Type signature:
    | (||)((closure)(a,b,c) -> d, a*b*c) -> d

    Parameters:
        f : (closure)(a,b,c) -> d - The function to apply
        tup : a*b*c - The values to pass to the function

    Returns:
        The result of the values held in the tuple applied to f
*/
fun apply3(f : (closure)(a, b, c) -> d, tup : a*b*c) : d = (
    let (a, b, c) = tup;
    f(a, b, c)
)

/*
    Function: apply4

    Applies a tuple of values to the given function

    Type signature:
    | (||)((closure)(a,b,c,d) -> e, a*b*c*d) -> e

    Parameters:
        f : (closure)(a,b,c,d) -> e - The function to apply
        tup : a*b*c*d - The values to pass to the function

    Returns:
        The result of the values held in the tuple applied to f
*/
fun apply4(f : (closure)(a,b,c,d) -> e, tup : a*b*c*d) : e = (
    let (a, b, c, d) = tup;
    f(a, b, c, d)
)

/*
    Function: fst

    Gives the first element of a two element tuple.

    Type signature:
    | (||)((a * b)) -> a

    Parameters:
        tup : (a * b) - The tuple to extract the first element from

    Returns:
        The first element of the two element tuple.
*/
fun fst(tup : (a * b)) : a =
    match tup {
        (x, _) => x
    }

/*
    Function: snd

    Gives the second element of a two element tuple.

    Type signature:
    | (||)((a * b)) -> b

    Parameters:
        tup : (a * b) - The tuple to extract the second element from

    Returns:
        The second element of the two element tuple.
*/
fun snd(tup : (a * b)) : b =
    match tup {
        (_, x) => x
    }

/*
    Function: add

    Adds the two arguments together.

    Type signature:
    | (||)(a, a) -> a where a : num

    Parameters:
        numA : a - The first number
        numB : a - The second number

    Returns:
        The sum of the two numbers
*/
fun add(numA : a, numB : a) : a where a : num = numA + numB

/*
    Function: sub

     Subtracts the two arguments

    Type signature:
    | (||)(a, a) -> a where a : num

    Parameters:
        numA : a - The first number
        numB : a - The second number

    Returns:
        The difference of the two numbers
*/
fun sub(numA : a, numB : a) : a where a : num = numA - numB

/*
    Function: mul

    Multiplies the two arguments together.

    Type signature:
    | (||)(a, a) -> a where a : num

    Parameters:
        numA : a - The first number
        numB : a - The second number

    Returns:
        The product of the two numbers
*/
fun mul(numA : a, numB : a) : a where a : num = numA * numB

/*
    Function: div

    Divides one number by the other.

    Type signature:
    | (||)(a, a) -> a where a : num

    Parameters:
        numA : a - The numerator
        numB : a - The denominator

    Returns:
        The difference of the two numbers
*/
fun div(numA : a, numB : a) : a where a : num = numA / numB

/*
    Function: swap

    Swaps the two elements of a tuple

    Type signature:
    | (||)(a*b) -> (b*a)

    Parameters:
        tup : a*b - The tuple to swap

    Returns:
        The tuple with swapped elements
*/
fun swap(tup) = (
    let (alpha, beta) = tup;
    (beta, alpha)
)

/*
    Function: until

    Yields the result of applying f until p holds.

    Type signature:
    | (||)((closureP)(a) -> bool, (closureF)(a) -> a, a) -> a

    Parameters:
        p: (closureP)(a) -> bool - The predicate
        f: (closureF)(a) -> a - The function to repeatedly apply
        a0: a - The initial value to supply to the function
*/
fun until(p : (closureP)(a) -> bool, f : (closureF)(a) -> a, a0 : a) : a = (
    let mutable a = a0;
    while !p(a) do (
        set a = f(a);
        ()
    ) end;
    a
)

/*
    Function: ignore

    Takes a value as a parameter and ignores it.

    Type signature:
    | (||)(a) -> unit
*/
fun ignore(val : a) = ()

/*
    Function: u8ToU16

    Converts a uint8 to a uint16.

    Type signature:
    | (||)(uint8) ->uint16

    Parameters:
        n : uint8 - The number to convert

    Returns:
        The number with converted type
*/
fun u8ToU16(n : uint8) : uint16 = (
    var ret : uint16;
    #ret = (uint16_t) n;#;
    ret
)

/*
    Function: u8ToU32

    Converts a uint8 to a uint32.

    Type signature:
    | (||)(uint8) ->uint32

    Parameters:
        n : uint8 - The number to convert

    Returns:
        The number with converted type
*/
fun u8ToU32(n : uint8) : uint32 = (
    var ret : uint32;
    #ret = (uint32_t) n;#;
    ret
)

/*
    Function: u8ToI8

    Converts a uint8 to a int8.

    Type signature:
    | (||)(uint8) ->int8

    Parameters:
        n : uint8 - The number to convert

    Returns:
        The number with converted type
*/
fun u8ToI8(n : uint8) : int8 = (
    var ret : int8;
    #ret = (int8_t) n;#;
    ret
)

/*
    Function: u8ToI16

    Converts a uint8 to a int16.

    Type signature:
    | (||)(uint8) ->int16

    Parameters:
        n : uint8 - The number to convert

    Returns:
        The number with converted type
*/
fun u8ToI16(n : uint8) : int16 = (
    var ret : int16;
    #ret = (int16_t) n;#;
    ret
)

/*
    Function: u8ToI32

    Converts a uint8 to a int32.

    Type signature:
    | (||)(uint8) ->int32

    Parameters:
        n : uint8 - The number to convert

    Returns:
        The number with converted type
*/
fun u8ToI32(n : uint8) : int32 = (
    var ret : int32;
    #ret = (int32_t) n;#;
    ret
)

/*
    Function: u8ToFloat

    Converts a uint8 to a float.

    Type signature:
    | (||)(uint8) ->float

    Parameters:
        n : uint8 - The number to convert

    Returns:
        The number with converted type
*/
fun u8ToFloat(n : uint8) : float = (
    var ret : float;
    #ret = (float) n;#;
    ret
)

/*
    Function: u8ToDouble

    Converts a uint8 to a double.

    Type signature:
    | (||)(uint8) ->double

    Parameters:
        n : uint8 - The number to convert

    Returns:
        The number with converted type
*/
fun u8ToDouble(n : uint8) : double = (
    var ret : double;
    #ret = (double) n;#;
    ret
)

/*
    Function: u16ToU8

    Converts a uint16 to a uint8.

    Type signature:
    | (||)(uint16) ->uint8

    Parameters:
        n : uint16 - The number to convert

    Returns:
        The number with converted type
*/
fun u16ToU8(n : uint16) : uint8 = (
    var ret : uint8;
    #ret = (uint8_t) n;#;
    ret
)

/*
    Function: u16ToU32

    Converts a uint16 to a uint32.

    Type signature:
    | (||)(uint16) ->uint32

    Parameters:
        n : uint16 - The number to convert

    Returns:
        The number with converted type
*/
fun u16ToU32(n : uint16) : uint32 = (
    var ret : uint32;
    #ret = (uint32_t) n;#;
    ret
)

/*
    Function: u16ToI8

    Converts a uint16 to a int8.

    Type signature:
    | (||)(uint16) ->int8

    Parameters:
        n : uint16 - The number to convert

    Returns:
        The number with converted type
*/
fun u16ToI8(n : uint16) : int8 = (
    var ret : int8;
    #ret = (int8_t) n;#;
    ret
)

/*
    Function: u16ToI16

    Converts a uint16 to a int16.

    Type signature:
    | (||)(uint16) ->int16

    Parameters:
        n : uint16 - The number to convert

    Returns:
        The number with converted type
*/
fun u16ToI16(n : uint16) : int16 = (
    var ret : int16;
    #ret = (int16_t) n;#;
    ret
)

/*
    Function: u16ToI32

    Converts a uint16 to a int32.

    Type signature:
    | (||)(uint16) ->int32

    Parameters:
        n : uint16 - The number to convert

    Returns:
        The number with converted type
*/
fun u16ToI32(n : uint16) : int32 = (
    var ret : int32;
    #ret = (int32_t) n;#;
    ret
)

/*
    Function: u16ToFloat

    Converts a uint16 to a float.

    Type signature:
    | (||)(uint16) ->float

    Parameters:
        n : uint16 - The number to convert

    Returns:
        The number with converted type
*/
fun u16ToFloat(n : uint16) : float = (
    var ret : float;
    #ret = (float) n;#;
    ret
)

/*
    Function: u16ToDouble

    Converts a uint16 to a double.

    Type signature:
    | (||)(uint16) ->double

    Parameters:
        n : uint16 - The number to convert

    Returns:
        The number with converted type
*/
fun u16ToDouble(n : uint16) : double = (
    var ret : double;
    #ret = (double) n;#;
    ret
)

/*
    Function: u32ToU8

    Converts a uint32 to a uint8.

    Type signature:
    | (||)(uint32) ->uint8

    Parameters:
        n : uint32 - The number to convert

    Returns:
        The number with converted type
*/
fun u32ToU8(n : uint32) : uint8 = (
    var ret : uint8;
    #ret = (uint8_t) n;#;
    ret
)

/*
    Function: u32ToU16

    Converts a uint32 to a uint16.

    Type signature:
    | (||)(uint32) ->uint16

    Parameters:
        n : uint32 - The number to convert

    Returns:
        The number with converted type
*/
fun u32ToU16(n : uint32) : uint16 = (
    var ret : uint16;
    #ret = (uint16_t) n;#;
    ret
)

/*
    Function: u32ToI8

    Converts a uint32 to a int8.

    Type signature:
    | (||)(uint32) ->int8

    Parameters:
        n : uint32 - The number to convert

    Returns:
        The number with converted type
*/
fun u32ToI8(n : uint32) : int8 = (
    var ret : int8;
    #ret = (int8_t) n;#;
    ret
)

/*
    Function: u32ToI16

    Converts a uint32 to a int16.

    Type signature:
    | (||)(uint32) ->int16

    Parameters:
        n : uint32 - The number to convert

    Returns:
        The number with converted type
*/
fun u32ToI16(n : uint32) : int16 = (
    var ret : int16;
    #ret = (int16_t) n;#;
    ret
)

/*
    Function: u32ToI32

    Converts a uint32 to a int32.

    Type signature:
    | (||)(uint32) ->int32

    Parameters:
        n : uint32 - The number to convert

    Returns:
        The number with converted type
*/
fun u32ToI32(n : uint32) : int32 = (
    var ret : int32;
    #ret = (int32_t) n;#;
    ret
)

/*
    Function: u32ToFloat

    Converts a uint32 to a float.

    Type signature:
    | (||)(uint32) ->float

    Parameters:
        n : uint32 - The number to convert

    Returns:
        The number with converted type
*/
fun u32ToFloat(n : uint32) : float = (
    var ret : float;
    #ret = (float) n;#;
    ret
)

/*
    Function: u32ToDouble

    Converts a uint32 to a double.

    Type signature:
    | (||)(uint32) ->double

    Parameters:
        n : uint32 - The number to convert

    Returns:
        The number with converted type
*/
fun u32ToDouble(n : uint32) : double = (
    var ret : double;
    #ret = (double) n;#;
    ret
)

/*
    Function: i8ToU8

    Converts a int8 to a uint8.

    Type signature:
    | (||)(int8) ->uint8

    Parameters:
        n : int8 - The number to convert

    Returns:
        The number with converted type
*/
fun i8ToU8(n : int8) : uint8 = (
    var ret : uint8;
    #ret = (uint8_t) n;#;
    ret
)

/*
    Function: i8ToU16

    Converts a int8 to a uint16.

    Type signature:
    | (||)(int8) ->uint16

    Parameters:
        n : int8 - The number to convert

    Returns:
        The number with converted type
*/
fun i8ToU16(n : int8) : uint16 = (
    var ret : uint16;
    #ret = (uint16_t) n;#;
    ret
)

/*
    Function: i8ToU32

    Converts a int8 to a uint32.

    Type signature:
    | (||)(int8) ->uint32

    Parameters:
        n : int8 - The number to convert

    Returns:
        The number with converted type
*/
fun i8ToU32(n : int8) : uint32 = (
    var ret : uint32;
    #ret = (uint32_t) n;#;
    ret
)

/*
    Function: i8ToI16

    Converts a int8 to a int16.

    Type signature:
    | (||)(int8) ->int16

    Parameters:
        n : int8 - The number to convert

    Returns:
        The number with converted type
*/
fun i8ToI16(n : int8) : int16 = (
    var ret : int16;
    #ret = (int16_t) n;#;
    ret
)

/*
    Function: i8ToI32

    Converts a int8 to a int32.

    Type signature:
    | (||)(int8) ->int32

    Parameters:
        n : int8 - The number to convert

    Returns:
        The number with converted type
*/
fun i8ToI32(n : int8) : int32 = (
    var ret : int32;
    #ret = (int32_t) n;#;
    ret
)

/*
    Function: i8ToFloat

    Converts a int8 to a float.

    Type signature:
    | (||)(int8) ->float

    Parameters:
        n : int8 - The number to convert

    Returns:
        The number with converted type
*/
fun i8ToFloat(n : int8) : float = (
    var ret : float;
    #ret = (float) n;#;
    ret
)

/*
    Function: i8ToDouble

    Converts a int8 to a double.

    Type signature:
    | (||)(int8) ->double

    Parameters:
        n : int8 - The number to convert

    Returns:
        The number with converted type
*/
fun i8ToDouble(n : int8) : double = (
    var ret : double;
    #ret = (double) n;#;
    ret
)

/*
    Function: i16ToU8

    Converts a int16 to a uint8.

    Type signature:
    | (||)(int16) ->uint8

    Parameters:
        n : int16 - The number to convert

    Returns:
        The number with converted type
*/
fun i16ToU8(n : int16) : uint8 = (
    var ret : uint8;
    #ret = (uint8_t) n;#;
    ret
)

/*
    Function: i16ToU16

    Converts a int16 to a uint16.

    Type signature:
    | (||)(int16) ->uint16

    Parameters:
        n : int16 - The number to convert

    Returns:
        The number with converted type
*/
fun i16ToU16(n : int16) : uint16 = (
    var ret : uint16;
    #ret = (uint16_t) n;#;
    ret
)

/*
    Function: i16ToU32

    Converts a int16 to a uint32.

    Type signature:
    | (||)(int16) ->uint32

    Parameters:
        n : int16 - The number to convert

    Returns:
        The number with converted type
*/
fun i16ToU32(n : int16) : uint32 = (
    var ret : uint32;
    #ret = (uint32_t) n;#;
    ret
)

/*
    Function: i16ToI8

    Converts a int16 to a int8.

    Type signature:
    | (||)(int16) ->int8

    Parameters:
        n : int16 - The number to convert

    Returns:
        The number with converted type
*/
fun i16ToI8(n : int16) : int8 = (
    var ret : int8;
    #ret = (int8_t) n;#;
    ret
)

/*
    Function: i16ToI32

    Converts a int16 to a int32.

    Type signature:
    | (||)(int16) ->int32

    Parameters:
        n : int16 - The number to convert

    Returns:
        The number with converted type
*/
fun i16ToI32(n : int16) : int32 = (
    var ret : int32;
    #ret = (int32_t) n;#;
    ret
)

/*
    Function: i16ToFloat

    Converts a int16 to a float.

    Type signature:
    | (||)(int16) ->float

    Parameters:
        n : int16 - The number to convert

    Returns:
        The number with converted type
*/
fun i16ToFloat(n : int16) : float = (
    var ret : float;
    #ret = (float) n;#;
    ret
)

/*
    Function: i16ToDouble

    Converts a int16 to a double.

    Type signature:
    | (||)(int16) ->double

    Parameters:
        n : int16 - The number to convert

    Returns:
        The number with converted type
*/
fun i16ToDouble(n : int16) : double = (
    var ret : double;
    #ret = (double) n;#;
    ret
)

/*
    Function: i32ToU8

    Converts a int32 to a uint8.

    Type signature:
    | (||)(int32) ->uint8

    Parameters:
        n : int32 - The number to convert

    Returns:
        The number with converted type
*/
fun i32ToU8(n : int32) : uint8 = (
    var ret : uint8;
    #ret = (uint8_t) n;#;
    ret
)

/*
    Function: i32ToU16

    Converts a int32 to a uint16.

    Type signature:
    | (||)(int32) ->uint16

    Parameters:
        n : int32 - The number to convert

    Returns:
        The number with converted type
*/
fun i32ToU16(n : int32) : uint16 = (
    var ret : uint16;
    #ret = (uint16_t) n;#;
    ret
)

/*
    Function: i32ToU32

    Converts a int32 to a uint32.

    Type signature:
    | (||)(int32) ->uint32

    Parameters:
        n : int32 - The number to convert

    Returns:
        The number with converted type
*/
fun i32ToU32(n : int32) : uint32 = (
    var ret : uint32;
    #ret = (uint32_t) n;#;
    ret
)

/*
    Function: i32ToI8

    Converts a int32 to a int8.

    Type signature:
    | (||)(int32) ->int8

    Parameters:
        n : int32 - The number to convert

    Returns:
        The number with converted type
*/
fun i32ToI8(n : int32) : int8 = (
    var ret : int8;
    #ret = (int8_t) n;#;
    ret
)

/*
    Function: i32ToI16

    Converts a int32 to a int16.

    Type signature:
    | (||)(int32) ->int16

    Parameters:
        n : int32 - The number to convert

    Returns:
        The number with converted type
*/
fun i32ToI16(n : int32) : int16 = (
    var ret : int16;
    #ret = (int16_t) n;#;
    ret
)

/*
    Function: i32ToFloat

    Converts a int32 to a float.

    Type signature:
    | (||)(int32) ->float

    Parameters:
        n : int32 - The number to convert

    Returns:
        The number with converted type
*/
fun i32ToFloat(n : int32) : float = (
    var ret : float;
    #ret = (float) n;#;
    ret
)

/*
    Function: i32ToDouble

    Converts a int32 to a double.

    Type signature:
    | (||)(int32) ->double

    Parameters:
        n : int32 - The number to convert

    Returns:
        The number with converted type
*/
fun i32ToDouble(n : int32) : double = (
    var ret : double;
    #ret = (double) n;#;
    ret
)

/*
    Function: floatToU8

    Converts a float to a uint8.

    Type signature:
    | (||)(float) ->uint8

    Parameters:
        n : float - The number to convert

    Returns:
        The number with converted type
*/
fun floatToU8(n : float) : uint8 = (
    var ret : uint8;
    #ret = (uint8_t) n;#;
    ret
)

/*
    Function: floatToU16

    Converts a float to a uint16.

    Type signature:
    | (||)(float) ->uint16

    Parameters:
        n : float - The number to convert

    Returns:
        The number with converted type
*/
fun floatToU16(n : float) : uint16 = (
    var ret : uint16;
    #ret = (uint16_t) n;#;
    ret
)

/*
    Function: floatToU32

    Converts a float to a uint32.

    Type signature:
    | (||)(float) ->uint32

    Parameters:
        n : float - The number to convert

    Returns:
        The number with converted type
*/
fun floatToU32(n : float) : uint32 = (
    var ret : uint32;
    #ret = (uint32_t) n;#;
    ret
)

/*
    Function: floatToI8

    Converts a float to a int8.

    Type signature:
    | (||)(float) -> int8

    Parameters:
        n : float - The number to convert

    Returns:
        The number with converted type
*/
fun floatToI8(n : float) : int8 = (
    var ret : int8;
    #ret = (int8_t) n;#;
    ret
)

/*
    Function: floatToI16

    Converts a float to a int16.

    Type signature:
    | (||)(float) -> int16

    Parameters:
        n : float - The number to convert

    Returns:
        The number with converted type
*/
fun floatToI16(n : float) : int16 = (
    var ret : int16;
    #ret = (int16_t) n;#;
    ret
)

/*
    Function: floatToI32

    Converts a float to a int32.

    Type signature:
    | (||)(float) ->int32

    Parameters:
        n : float - The number to convert

    Returns:
        The number with converted type
*/
fun floatToI32(n : float) : int32 = (
    var ret : int32;
    #ret = (int32_t) n;#;
    ret
)

/*
    Function: floatToDouble

    Converts a float to a double.

    Type signature:
    | (||)(float) ->double

    Parameters:
        n : float - The number to convert

    Returns:
        The number with converted type
*/
fun floatToDouble(n : float) : double = (
    var ret : double;
    #ret = (double) n;#;
    ret
)

/*
    Function: doubleToU8

    Converts a double to a uint8.

    Type signature:
    | (||)(double) ->uint8

    Parameters:
        n : double - The number to convert

    Returns:
        The number with converted type
*/
fun doubleToU8(n : double) : uint8 = (
    var ret : uint8;
    #ret = (uint8_t) n;#;
    ret
)

/*
    Function: doubleToU16

    Converts a double to a uint16.

    Type signature:
    | (||)(double) -> uint16

    Parameters:
        n : double - The number to convert

    Returns:
        The number with converted type
*/
fun doubleToU16(n : double) : uint16 = (
    var ret : uint16;
    #ret = (int16_t) n;#;
    ret
)

/*
    Function: doubleToU32

    Converts a double to a uint32.

    Type signature:
    | (||)(double) -> uint32

    Parameters:
        n : double - The number to convert

    Returns:
        The number with converted type
*/
fun doubleToU32(n : double) : uint32 = (
    var ret : uint32;
    #ret = (uint32_t) n;#;
    ret
)

/*
    Function: doubleToI8

    Converts a double to a int8.

    Type signature:
    | (||)(double) -> int8

    Parameters:
        n : double - The number to convert

    Returns:
        The number with converted type
*/
fun doubleToI8(n : double) : int8 = (
    var ret : int8;
    #ret = (int8_t) n;#;
    ret
)

/*
    Function: doubleToI16

    Converts a double to a int16.

    Type signature:
    | (||)(double) -> int16

    Parameters:
        n : double - The number to convert

    Returns:
        The number with converted type
*/
fun doubleToI16(n : double) : int16 = (
    var ret : int16;
    #ret = (int16_t) n;#;
    ret
)

/*
    Function: doubleToI32

    Converts a double to a int32.

    Type signature:
    | (||)(double) -> int32

    Parameters:
        n : double - The number to convert

    Returns:
        The number with converted type
*/
fun doubleToI32(n : double) : int32 = (
    var ret : int32;
    #ret = (int32_t) n;#;
    ret
)

/*
    Function: doubleToFloat

    Converts a double to a float.

    Type signature:
    | (||)(double) -> float

    Parameters:
        n : double - The number to convert

    Returns:
        The number with converted type
*/
fun doubleToFloat(n : double) : float = (
    var ret : float;
    #ret = (float) n;#;
    ret
)

/*
    Function: toUInt8

    Converts a number to a uint8.

    Type signature:
    | (||)(t) -> uint8 where t : num

    Parameters:
        n : t - The number to convert

    Returns:
        The number with converted type
*/
fun toUInt8(n : t) : uint8 where t : num = (
    var ret : uint8;
    #ret = (uint8_t) n;#;
    ret
)

/*
    Function: toInt8

    Converts a number to a int8.

    Type signature:
    | (||)(t) -> int8 where t : num

    Parameters:
        n : t - The number to convert

    Returns:
        The number with converted type
*/
fun toInt8(n : t) : int8 where t : num = (
    var ret : int8;
    #ret = (int8_t) n;#;
    ret
)

/*
    Function: toUInt16

    Converts a number to a uint16.

    Type signature:
    | (||)(t) -> uint16 where t : num

    Parameters:
        n : t - The number to convert

    Returns:
        The number with converted type
*/
fun toUInt16(n : t) : uint16 where t : num = (
    var ret : uint16;
    #ret = (uint16_t) n;#;
    ret
)

/*
    Function: toInt16

    Converts a number to a uint16.

    Type signature:
    | (||)(t) -> uint16 where t : num

    Parameters:
        n : t - The number to convert

    Returns:
        The number with converted type
*/
fun toInt16(n : t) : int16 where t : num = (
    var ret : int16;
    #ret = (int16_t) n;#;
    ret
)

/*
    Function: toUInt32

    Converts a number to a uint32.

    Type signature:
    | (||)(t) -> uint32 where t : num

    Parameters:
        n : t - The number to convert

    Returns:
        The number with converted type
*/
fun toUInt32(n : t) : uint32 where t : num = (
    var ret : uint32;
    #ret = (uint32_t) n;#;
    ret
)

/*
    Function: toInt32

    Converts a number to a int32.

    Type signature:
    | (||)(t) -> int32 where t : num

    Parameters:
        n : t - The number to convert

    Returns:
        The number with converted type
*/
fun toInt32(n : t) : int32 where t : num = (
    var ret : int32;
    #ret = (int32_t) n;#;
    ret
)

/*
    Function: toFloat

    Converts a number to a float.

    Type signature:
    | (||)(t) -> float where t : num

    Parameters:
        n : t - The number to convert

    Returns:
        The number with converted type
*/
fun toFloat(n : t) : float where t : num = (
    var ret : float;
    #ret = (float) n;#;
    ret
)

/*
    Function: toDouble

    Converts a number to a double.

    Type signature:
    | (||)(t) -> double where t : num

    Parameters:
        n : t - The number to convert

    Returns:
        The number with converted type
*/
fun toDouble(n : t) : double where t : num = (
    var ret : double;
    #ret = (double) n;#;
    ret
)

/*
    Function: fromUInt8

    Converts a uint8 to another number type.

    Type signature:
    | (||)(uint8) -> t where t : num

    Parameters:
        n : uint8 - The number to convert

    Returns:
        The number with converted type
*/
fun fromUInt8(n : uint8) : t where t : num = (
    var ret : t;
    #ret = (t) n;#;
    ret
)

/*
    Function: fromInt8

    Converts a int8 to another number type.

    Type signature:
    | (||)(int8) -> t where t : num

    Parameters:
        n : int8 - The number to convert

    Returns:
        The number with converted type
*/
fun fromInt8(n : int8) : t where t : num = (
    var ret : t;
    #ret = (t) n;#;
    ret
)

/*
    Function: fromUInt16

    Converts a uint16 to another number type.

    Type signature:
    | (||)(uint16) -> t where t : num

    Parameters:
        n : uint16 - The number to convert

    Returns:
        The number with converted type
*/
fun fromUInt16(n : uint16) : t where t : num = (
    var ret : t;
    #ret = (t) n;#;
    ret
)

/*
    Function: fromInt16

    Converts a int16 to another number type.

    Type signature:
    | (||)(int16) -> t where t : num

    Parameters:
        n : int16 - The number to convert

    Returns:
        The number with converted type
*/
fun fromInt16(n : int16) : t where t : num = (
    var ret : t;
    #ret = (t) n;#;
    ret
)

/*
    Function: fromUInt32

    Converts a uint32 to another number type.

    Type signature:
    | (||)(uint32) -> t where t : num

    Parameters:
        n : uint32 - The number to convert

    Returns:
        The number with converted type
*/
fun fromUInt32(n : uint32) : t where t : num = (
    var ret : t;
    #ret = (t) n;#;
    ret
)

/*
    Function: fromInt32

    Converts a int32 to another number type.

    Type signature:
    | (||)(int32) -> t where t : num

    Parameters:
        n : int32 - The number to convert

    Returns:
        The number with converted type
*/
fun fromInt32(n : int32) : t where t : num = (
    var ret : t;
    #ret = (t) n;#;
    ret
)

/*
    Function: fromFloat

    Converts a float to another number type.

    Type signature:
    | (||)(float) -> t where t : num

    Parameters:
        n : float - The number to convert

    Returns:
        The number with converted type
*/
fun fromFloat(n : float) : t where t : num = (
    var ret : t;
    #ret = (t) n;#;
    ret
)

/*
    Function: fromDouble

    Converts a double to another number type.

    Type signature:
    | (||)(double) -> t where t : num

    Parameters:
        n : double - The number to convert

    Returns:
        The number with converted type
*/
fun fromDouble(n : double) : t where t : num = (
    var ret : t;
    #ret = (t) n;#;
    ret
)

/*
    Function: cast

    Converts a number of one type to a number of another type.

    Type signature:
    | (||)(a) -> b where a : num, b : num

    Parameters:
        x : a - The number to convert
    
    Returns:
        The number with converted type
*/
fun cast(x : a) : b where a : num, b : num = (
    var ret : b;
    #ret = (b) x;#;
    ret
)