module Time
open(Prelude)
export(sleep, now, timerState, state, every, everyWithOffset)

fun sleep(time : uint32) : unit =
    #delay(time);#

fun now() : uint32 = (
    let ret : uint32 = 0;
    #ret = millis();#;
    ret
)

type timerState = { lastPulse : uint32 }

fun state() : timerState ref =
    ref timerState { lastPulse = 0 }

fun every(interval : uint32, state : timerState ref) : sig<uint32> = (
    let t = now();
    let lastWindow =
        if interval == 0 then
            t
        else
            (t / interval) * interval
        end;
    if (!state).lastPulse > lastWindow then
        signal<uint32>(nothing<uint32>())
    else
        (set ref state = timerState { lastPulse = t };
        signal<uint32>(just<uint32>(t)))
    end
)

fun everyWithOffset(interval : uint32, offset : uint32, state : timerState ref) : sig<uint32> = (
    let t = now();
    let t2 = if offset > t then
                 offset
             else
                 t
             end;
    let lastWindow =
        if interval == 0 then
            t2
        else
            ((t2 - (offset mod interval)) / interval) * interval
        end;
    if (!state).lastPulse > lastWindow then
        signal<uint32>(nothing<uint32>())
    else
        (set ref state = timerState { lastPulse = t };
        signal<uint32>(just<uint32>(t)))
    end
)