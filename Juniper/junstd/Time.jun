module Time

/*
    Interface: Time
*/
/*
    Function: wait

    Pauses the program for the amount of time (in milliseconds) given as the
    parameter.

    Type Signature:
    
        | (uint32) -> unit

    Parameters:
        time : uint32 - The amount of time to sleep
*/
fun wait(time : uint32) : unit =
    #delay(time);#

/*
    Function: now

    Gives the number of milliseconds that has passed since the program
    began running. Useful as a time stamp.

    Type Signature:
    
        | () -> uint32

    Returns:
        The time elapsed
*/
fun now() : uint32 = {
    let ret : uint32 = 0u32
    #ret = millis();#
    ret
}

/*
    Type: alias timerState

    Holds the state for the every functions

    | alias timerState = { lastPulse : uint32 }

    Members:
        lastPulse : uint32 - Timestamp of the last pulse
*/
alias timerState = { lastPulse : uint32 }

/*
    Variable: state

    Useful for creating an initial timerState where lastPulse is 0

    Type:
    | timerState
*/
let state : timerState = { lastPulse := 0 }

/*
    Function: every

    Produces a signal of millisecond time stamps which fires in a time delay
    of the given interval.

    Type Signature:
    
        | (uint32, inout timerState) -> sig<uint32>

    Parameters:
        interval : uint32 - The interval between values firing
        state : inout timerState - Holds the last time that the signal fired

    Returns:
        A signal of timestamps which carries a value every interval
        milliseconds.
*/
fun every(interval : uint32, inout state : timerState) : sig<uint32> = {
    let t = now()
    let lastWindow =
        if (interval == 0) {
            t
        } else {
            (t / interval) * interval
        }
    if (state.lastPulse >= lastWindow) {
        signal(nothing())
    } else {
        state.lastPulse = t
        signal(just(t))
    }
}