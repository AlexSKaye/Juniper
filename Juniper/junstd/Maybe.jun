module Maybe
open(Prelude)

fun map<'a,'b>(f : ('a) -> 'b, maybeVal : maybe<'a>) : maybe<'b> =
    case maybeVal of
    | just<'a>(val) => just<'b>(f(val))
    | nothing => nothing
    end

fun get<'a>(maybeVal : maybe<'a>) : 'a =
    case maybeVal of
    | just<'a>(val) => val
    end

fun isSome<'a>(maybeVal : maybe<'a>) : bool =
    case maybeVal of
    | just<'a>(_) => true
    | _ => false
    end

fun isNone<'a>(maybeVal : maybe<'a>) : bool =
    not isSome<'a>(maybeVal)

fun count<'a>(maybeVal : maybe<'a>) : uint8 =
    case maybeVal of
    | just<'a>(_) => 1
    | _ => 0
    end

fun foldl<'state,'t>(f : ('state, 't) -> 'state, initState : 'state, maybeVal : maybe<'t>) : 'state =
    case maybeVal of
    | just<'t>(val) => f(initState, val)
    | _ => initState
    end

fun fodlr<'state,'t>(f : ('state, 't) -> 'state, initState : 'state, maybeVal : maybe<'t>) : 'state =
    foldl<'state,'t>(f, initState, maybeVal)

fun iter<'a,'b>(f : ('a) -> unit, maybeVal : maybe<'a>) : unit =
    case maybeVal of
    | just<'a>(val) =>
        (f(val);
        ())
    | nothing =>
        ()
    end