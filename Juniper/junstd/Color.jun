module Color
open(Prelude)

type rgb = { r : uint8; g : uint8; b : uint8 }
type rgba = { r : uint8; g : uint8; b : uint8; a : uint8 }
type hsv = { h : float; s : float; v : float }
type hsva = { h : float; s : float; v : float; a : float }

fun hsvToRgb(color : hsv) : rgb = (
    let hsv{h=h; s=s; v=v} = color;
    let c : float = v * s;
    let x : float = c * (1.0 - Math:fabs_(Math:fmod_((h / 60.0), 2.0) - 1.0));
    let m : float = v - c;
    let (rPrime, gPrime, bPrime) =
        if 0.0f <= h and h < 60.0f then
            (c, x, 0.0f)
        elif 60.0f <= h and h < 120.0f then
            (x, c, 0.0f)
        elif 120.0f <= h and h < 180.0f then
            (0.0f, c, x)
        elif 180.0f <= h and h < 240.0f then
            (0.0f, x, c)
        elif 240.0f <= h and h < 300.0f then
            (x, 0.0f, c)
        else
            (c, 0.0f, x)
        end;
    let r = (rPrime + m) * 255.0f;
    let g = (gPrime + m) * 255.0f;
    let b = (bPrime + m) * 255.0f;
    rgb {r=r; g=g; b=b}
)

fun rgbToRgb565(color : rgb) : uint16 = (
    let rgb{r=r; g=g; b=b} = color;
    ((u8ToU16(r) &&& 0xf8u16) <<< 8) ||| ((u8ToU16(g) &&& 0xfcu16) <<< 3) ||| (u8ToU16(b) >>> 3)
)

let red : rgb = rgb{r=255u8; g=0; b=0}
let green : rgb = rgb{r=0; g=255u8; b=0}
let blue : rgb = rgb{r=0; g=0; b=255u8}
let black : rgb = rgb{r=0; g=0; b=0}
let white : rgb = rgb{r=255u8; g=255u8; b=255u8}
let yellow : rgb = rgb{r=255u8; g=255u8; b=0}
let magenta : rgb = rgb{r=255u8; g=0; b=255u8}
let cyan : rgb = rgb{r=0; g=255u8; b=255u8}