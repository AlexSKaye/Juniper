module List
open(Prelude)

fun map<'a,'b;n>(f : ('a) -> 'b, lst : list<'a; n>) : list<'b; n> = (
    let mutable copy = lst;
    for i : uint32 in 0 to n - 1 do
        set copy.data[i] = f(lst.data[i])
    end;
    copy
)

fun foldl<'state,'t;n>(f : ('state, 't) -> 'state, initState : 'state, lst : list<'t; n>) : 'state = (
    let mutable state = initState;
    for i : uint32 in 0 to lst.length - 1 do
        set state = f(state, lst.data[i])
    end;
    state
)

fun foldr<'state,'t;n>(f : ('state, 't) -> 'state, initState : 'state, lst : list<'t; n>) : 'state = (
    let mutable state = initState;
    for i : uint32 in lst.length - 1 downto 0 do
        set state = f(state, lst.data[i])
    end;
    state
)

fun append<'t;acap,bcap,ccap>(lstA : list<'t;acap>, lstB : list<'t;bcap>) : list<'t;ccap> = (
    let mutable j : uint32 = 0;
    let mutable out = list<'t;ccap>{data=array 't[ccap] of lstA.data[0] end;
                                    length=lstA.length + lstB.length};
    for i : uint32 in 0 to lstA.length - 1 do (
        set out.data[j] = lstA.data[i];
        set j = j + 1
    ) end;
    for i : uint32 in 0 to lstB.length - 1 do (
        set out.data[j] = lstB.data[i];
        set j = j + 1
    ) end;
    out
)