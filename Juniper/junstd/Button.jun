module Button
open(Prelude, Io)
export(buttonState, state, debounce, debounceDelay)

type buttonState = { actualState : pinState; lastState : pinState; lastDebounceTime : uint32 }

fun state() : buttonState ref = (
    ref buttonState { actualState = Io:low(); lastState = Io:low(); lastDebounceTime = 0 }
)

fun debounceDelay(incoming : sig<pinState>, delay : uint16, buttonState : buttonState ref) : sig<pinState> =
    Signal:map<pinState, pinState>(fn (currentState : pinState) : pinState ->
        (let buttonState {actualState=actualState;
                          lastState=lastState;
                          lastDebounceTime=lastDebounceTime} = !buttonState;
        if currentState != lastState then
            (set ref buttonState = buttonState { actualState = actualState;
                                                 lastState = currentState;
                                                 lastDebounceTime = Time:now() };
            actualState)
        elif (currentState != actualState) and ((Time:now() - (!buttonState).lastDebounceTime) > delay) then
            (set ref buttonState = buttonState { actualState = currentState;
                                                 lastState = currentState;
                                                 lastDebounceTime = lastDebounceTime};
            currentState)
        else
            (set ref buttonState = buttonState { actualState = actualState;
                                                 lastState = currentState;
                                                 lastDebounceTime = lastDebounceTime };
            actualState)
        end)
    , incoming)

fun debounce(incoming : sig<pinState>, buttonState : buttonState ref) : sig<pinState> =
    debounceDelay(incoming, 50, buttonState)
