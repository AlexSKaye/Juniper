// Signature file for parser generated by fsyacc
module Parser
open Ast
type token = 
  | EOF
  | DOT
  | UNDERSCORE
  | FALSE
  | TRUE
  | UNIT
  | LTHANEQ
  | GTHANEQ
  | LTHAN
  | GTHAN
  | EQUAL
  | NOTEQUAL
  | SEMICOLON
  | COLON
  | TYPE
  | OF
  | CASE
  | TILDE
  | TICK
  | PIPE
  | AMPERSAND
  | OR
  | AND
  | NOT
  | DIVIDE
  | TIMES
  | MINUS
  | PLUS
  | MOD
  | COMMA
  | RCURLYBRACE
  | LCURLYBRACE
  | RBRACK
  | LBRACK
  | RPAREN
  | LPAREN
  | FOR
  | VAR
  | LET
  | DO
  | WHILE
  | ELIF
  | ELSE
  | THEN
  | IF
  | FUN
  | BREAK
  | MODULE
  | EXPORT
  | OPEN
  | END
  | RETURN
  | RECORD
  | ALIAS
  | STRING of (string)
  | ID of (string)
  | FLOAT of (string)
  | INT of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DOT
    | TOKEN_UNDERSCORE
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_UNIT
    | TOKEN_LTHANEQ
    | TOKEN_GTHANEQ
    | TOKEN_LTHAN
    | TOKEN_GTHAN
    | TOKEN_EQUAL
    | TOKEN_NOTEQUAL
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_TYPE
    | TOKEN_OF
    | TOKEN_CASE
    | TOKEN_TILDE
    | TOKEN_TICK
    | TOKEN_PIPE
    | TOKEN_AMPERSAND
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_DIVIDE
    | TOKEN_TIMES
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_MOD
    | TOKEN_COMMA
    | TOKEN_RCURLYBRACE
    | TOKEN_LCURLYBRACE
    | TOKEN_RBRACK
    | TOKEN_LBRACK
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_FOR
    | TOKEN_VAR
    | TOKEN_LET
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_ELIF
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_FUN
    | TOKEN_BREAK
    | TOKEN_MODULE
    | TOKEN_EXPORT
    | TOKEN_OPEN
    | TOKEN_END
    | TOKEN_RETURN
    | TOKEN_RECORD
    | TOKEN_ALIAS
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_declarationList
    | NONTERM_declaration
    | NONTERM_exports
    | NONTERM_typealiasdec
    | NONTERM_moduleNameDec
    | NONTERM_fundec
    | NONTERM_funargList
    | NONTERM_tycapvars
    | NONTERM_idList
    | NONTERM_tycapExprs
    | NONTERM_tyExprs
    | NONTERM_capExprs
    | NONTERM_recorddec
    | NONTERM_recordList
    | NONTERM_uniondec
    | NONTERM_valueConList
    | NONTERM_valueCon
    | NONTERM_expr
    | NONTERM_caseClauseList
    | NONTERM_pattern
    | NONTERM_valConPatternList
    | NONTERM_recPatternList
    | NONTERM_elifList
    | NONTERM_seqExprList
    | NONTERM_callExprList
    | NONTERM_tyexpr
    | NONTERM_nonEmptyTyExprList
    | NONTERM_tyexprList
    | NONTERM_capexpr
    | NONTERM_moduleQualifier
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( Module ) 
