module Blink
open(Prelude, Io, Time)

let boardLed : int16 = 13

let timerState : timerState ref = Time:state()
let ledState : pinState ref = ref low()

fun otherPinState(p : pinState) : pinState =
    case p of
    | high() => low()
    | low() => high()
    end

fun blink() : unit = (
    let ledSig = Signal:foldP<uint32, pinState>(fn (currentTime : uint32, lastState : pinState) : pinState ->
                                                    otherPinState(lastState),
                                                ledState, Time:every(100, timerState));
    Signal:map<pinState, unit>(fn (led : pinState) : unit ->
                                   Io:digWrite(boardLed, led), ledSig);
    ()
)

fun setup() : unit = 
    Io:setPinMode(boardLed, Io:output())
    
fun main() : unit = (
    setup();
    while true do (
        blink();
        Time:sleep(50)
    ) end
)