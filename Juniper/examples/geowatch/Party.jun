module Party
open(Prelude)
export(execute)

let offC : Neopixel:color = Neopixel:makeColor(0, 0, 0)
let whiteC : Neopixel:color = Neopixel:makeColor(255, 255, 255)
let redC : Neopixel:color = Neopixel:makeColor(255, 0, 0)
let greenC : Neopixel:color = Neopixel:makeColor(0, 255, 0)
let blueC : Neopixel:color = Neopixel:makeColor(0, 0, 255)

let timerState1 : Time:timerState ref = Time:state()
let timerState2 : Time:timerState ref = Time:state()
let timerState3 : Time:timerState ref = Time:state()

type color1 = off | white
type color2 = red | offRed | green | offGreen | blue | offBlue

let color1State : color1 ref = ref off()
let color2State : color2 ref = ref red()

fun execute(ringSize : uint16, ringStrip : Neopixel:neoPixelStrip) : unit = (
    let color1Sig =
        Signal:foldP<uint32, color1>(
            fn (t : uint32, prevColor : color1) : color1 ->
                case prevColor of
                | off() => white()
                | white() => off()
                end,
            color1State,
            Time:every(300, timerState1));
    Signal:sink<color1>(
        fn (c : color1) : unit -> (
            let color =
                case c of
                | off() => offC
                | white() => whiteC
                end;
            for i : uint16 in 0 to (ringSize - 1)/2 do
                Neopixel:setPixelColor((2 * i) mod ringSize, color, ringStrip)
            end),
        color1Sig);
    let color2Sig =
        Signal:foldP<uint32, color2>(
            fn (t : uint32, prevColor : color2) : color2 ->
                case prevColor of
                | red() => offRed()
                | offRed() => green()
                | green() => offGreen()
                | offGreen() => blue()
                | blue() => offBlue()
                | offBlue() => red()
                end,
            color2State,
            Time:every(600, timerState1));
    Signal:sink<color2>(
        fn (c : color2) : unit -> (
            let color =
                case c of
                | offRed() => offC
                | offGreen() => offC
                | offBlue() => offC
                | red() => redC
                | green() => greenC
                | blue() => blueC
                end;
            for i : uint16 in 0 to (ringSize - 1)/2 do
                Neopixel:setPixelColor(((2 * i) + 1) mod ringSize, color, ringStrip)
            end),
        color2Sig);
    Signal:sink<uint32>(fn (t : uint32) : unit -> Neopixel:show(ringStrip), Time:every(300, timerState3))
)
