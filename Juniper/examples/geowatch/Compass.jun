module Compass
open(Prelude, Vector)
export(execute, getHeading)

let northColor : Neopixel:color = Neopixel:makeColor(0, 12, 16)
let adjColor : Neopixel:color = Neopixel:makeColor(0, 3, 4)
let adjColor2 : Neopixel:color = Neopixel:makeColor(0, 1, 2)

fun getHeading(mag : vector<float;3>, acc : vector<float;3>) : float = (
    // See http://stackoverflow.com/questions/1185874/how-to-determine-absolute-orientation
    let b1 = Vector:normalize<float;3>(Vector:cross<float>(acc, Vector:cross<float>(mag, acc)));
    let xx = Vector:get<float;3>(b1, x);
    let yy = Vector:get<float;3>(b1, y);
    if 0.1 > ((xx * xx) + (yy * yy)) then
        0.0
    else
        Math:atan2_(yy, xx)
    end
)

fun getLed(heading : float, ringSize : uint16) : uint16 = (
    let led : uint16 = Math:mapRange(heading, -1 * Math:pi, Math:pi, 0, ringSize - 1);
    (ringSize - 1 - led) mod ringSize
)

fun execute(magSig : sig<(vector<float;3>*vector<float;3>)>,
            ringSize : uint16,
            ringStrip : Neopixel:neoPixelStrip) : unit =
    Signal:sink<(vector<float;3>*vector<float;3>)>(
        fn (magAccData : (vector<float;3>*vector<float;3>)) : unit -> (
            let (magData, accData) = magAccData;
            let led : uint16 = getLed(getHeading(magData, accData), ringSize);
            Neopixel:clear(ringStrip);
            Neopixel:setPixelColor(led, northColor, ringStrip);
            Neopixel:setPixelColor((led + 1) mod ringSize, adjColor, ringStrip);
            Neopixel:setPixelColor((led - 1) mod ringSize, adjColor, ringStrip);
            Neopixel:setPixelColor((led + 2) mod ringSize, adjColor2, ringStrip);
            Neopixel:setPixelColor((led - 2) mod ringSize, adjColor2, ringStrip);
            Neopixel:show(ringStrip)),
        magSig)
