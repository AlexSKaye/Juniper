// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Ast
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DOT
  | UNDERSCORE
  | FALSE
  | TRUE
  | UNIT
  | LTHANEQ
  | GTHANEQ
  | LTHAN
  | GTHAN
  | EQUAL
  | NOTEQUAL
  | SEMICOLON
  | COLON
  | TYPE
  | OF
  | CASE
  | TILDE
  | TICK
  | PIPE
  | AMPERSAND
  | OR
  | AND
  | NOT
  | DIVIDE
  | TIMES
  | MINUS
  | PLUS
  | MOD
  | COMMA
  | RCURLYBRACE
  | LCURLYBRACE
  | RBRACK
  | LBRACK
  | RPAREN
  | LPAREN
  | FOR
  | VAR
  | LET
  | DO
  | WHILE
  | ELIF
  | ELSE
  | THEN
  | IF
  | FUN
  | BREAK
  | MODULE
  | EXPORT
  | OPEN
  | END
  | RETURN
  | RECORD
  | ALIAS
  | STRING of (string)
  | ID of (string)
  | FLOAT of (string)
  | INT of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DOT
    | TOKEN_UNDERSCORE
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_UNIT
    | TOKEN_LTHANEQ
    | TOKEN_GTHANEQ
    | TOKEN_LTHAN
    | TOKEN_GTHAN
    | TOKEN_EQUAL
    | TOKEN_NOTEQUAL
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_TYPE
    | TOKEN_OF
    | TOKEN_CASE
    | TOKEN_TILDE
    | TOKEN_TICK
    | TOKEN_PIPE
    | TOKEN_AMPERSAND
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_DIVIDE
    | TOKEN_TIMES
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_MOD
    | TOKEN_COMMA
    | TOKEN_RCURLYBRACE
    | TOKEN_LCURLYBRACE
    | TOKEN_RBRACK
    | TOKEN_LBRACK
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_FOR
    | TOKEN_VAR
    | TOKEN_LET
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_ELIF
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_FUN
    | TOKEN_BREAK
    | TOKEN_MODULE
    | TOKEN_EXPORT
    | TOKEN_OPEN
    | TOKEN_END
    | TOKEN_RETURN
    | TOKEN_RECORD
    | TOKEN_ALIAS
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_declarationList
    | NONTERM_declaration
    | NONTERM_exports
    | NONTERM_typealiasdec
    | NONTERM_moduleNameDec
    | NONTERM_fundec
    | NONTERM_funargList
    | NONTERM_tycapvars
    | NONTERM_idList
    | NONTERM_tycapExprs
    | NONTERM_tyExprs
    | NONTERM_capExprs
    | NONTERM_recorddec
    | NONTERM_recordList
    | NONTERM_uniondec
    | NONTERM_valueConList
    | NONTERM_valueCon
    | NONTERM_expr
    | NONTERM_caseClauseList
    | NONTERM_pattern
    | NONTERM_valConPatternList
    | NONTERM_recPatternList
    | NONTERM_elifList
    | NONTERM_seqExprList
    | NONTERM_callExprList
    | NONTERM_tyexpr
    | NONTERM_nonEmptyTyExprList
    | NONTERM_tyexprList
    | NONTERM_capexpr
    | NONTERM_moduleQualifier

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DOT  -> 1 
  | UNDERSCORE  -> 2 
  | FALSE  -> 3 
  | TRUE  -> 4 
  | UNIT  -> 5 
  | LTHANEQ  -> 6 
  | GTHANEQ  -> 7 
  | LTHAN  -> 8 
  | GTHAN  -> 9 
  | EQUAL  -> 10 
  | NOTEQUAL  -> 11 
  | SEMICOLON  -> 12 
  | COLON  -> 13 
  | TYPE  -> 14 
  | OF  -> 15 
  | CASE  -> 16 
  | TILDE  -> 17 
  | TICK  -> 18 
  | PIPE  -> 19 
  | AMPERSAND  -> 20 
  | OR  -> 21 
  | AND  -> 22 
  | NOT  -> 23 
  | DIVIDE  -> 24 
  | TIMES  -> 25 
  | MINUS  -> 26 
  | PLUS  -> 27 
  | MOD  -> 28 
  | COMMA  -> 29 
  | RCURLYBRACE  -> 30 
  | LCURLYBRACE  -> 31 
  | RBRACK  -> 32 
  | LBRACK  -> 33 
  | RPAREN  -> 34 
  | LPAREN  -> 35 
  | FOR  -> 36 
  | VAR  -> 37 
  | LET  -> 38 
  | DO  -> 39 
  | WHILE  -> 40 
  | ELIF  -> 41 
  | ELSE  -> 42 
  | THEN  -> 43 
  | IF  -> 44 
  | FUN  -> 45 
  | BREAK  -> 46 
  | MODULE  -> 47 
  | EXPORT  -> 48 
  | OPEN  -> 49 
  | END  -> 50 
  | RETURN  -> 51 
  | RECORD  -> 52 
  | ALIAS  -> 53 
  | STRING _ -> 54 
  | ID _ -> 55 
  | FLOAT _ -> 56 
  | INT _ -> 57 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DOT 
  | 2 -> TOKEN_UNDERSCORE 
  | 3 -> TOKEN_FALSE 
  | 4 -> TOKEN_TRUE 
  | 5 -> TOKEN_UNIT 
  | 6 -> TOKEN_LTHANEQ 
  | 7 -> TOKEN_GTHANEQ 
  | 8 -> TOKEN_LTHAN 
  | 9 -> TOKEN_GTHAN 
  | 10 -> TOKEN_EQUAL 
  | 11 -> TOKEN_NOTEQUAL 
  | 12 -> TOKEN_SEMICOLON 
  | 13 -> TOKEN_COLON 
  | 14 -> TOKEN_TYPE 
  | 15 -> TOKEN_OF 
  | 16 -> TOKEN_CASE 
  | 17 -> TOKEN_TILDE 
  | 18 -> TOKEN_TICK 
  | 19 -> TOKEN_PIPE 
  | 20 -> TOKEN_AMPERSAND 
  | 21 -> TOKEN_OR 
  | 22 -> TOKEN_AND 
  | 23 -> TOKEN_NOT 
  | 24 -> TOKEN_DIVIDE 
  | 25 -> TOKEN_TIMES 
  | 26 -> TOKEN_MINUS 
  | 27 -> TOKEN_PLUS 
  | 28 -> TOKEN_MOD 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_RCURLYBRACE 
  | 31 -> TOKEN_LCURLYBRACE 
  | 32 -> TOKEN_RBRACK 
  | 33 -> TOKEN_LBRACK 
  | 34 -> TOKEN_RPAREN 
  | 35 -> TOKEN_LPAREN 
  | 36 -> TOKEN_FOR 
  | 37 -> TOKEN_VAR 
  | 38 -> TOKEN_LET 
  | 39 -> TOKEN_DO 
  | 40 -> TOKEN_WHILE 
  | 41 -> TOKEN_ELIF 
  | 42 -> TOKEN_ELSE 
  | 43 -> TOKEN_THEN 
  | 44 -> TOKEN_IF 
  | 45 -> TOKEN_FUN 
  | 46 -> TOKEN_BREAK 
  | 47 -> TOKEN_MODULE 
  | 48 -> TOKEN_EXPORT 
  | 49 -> TOKEN_OPEN 
  | 50 -> TOKEN_END 
  | 51 -> TOKEN_RETURN 
  | 52 -> TOKEN_RECORD 
  | 53 -> TOKEN_ALIAS 
  | 54 -> TOKEN_STRING 
  | 55 -> TOKEN_ID 
  | 56 -> TOKEN_FLOAT 
  | 57 -> TOKEN_INT 
  | 60 -> TOKEN_end_of_input
  | 58 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_declarationList 
    | 3 -> NONTERM_declarationList 
    | 4 -> NONTERM_declaration 
    | 5 -> NONTERM_declaration 
    | 6 -> NONTERM_declaration 
    | 7 -> NONTERM_declaration 
    | 8 -> NONTERM_declaration 
    | 9 -> NONTERM_declaration 
    | 10 -> NONTERM_exports 
    | 11 -> NONTERM_typealiasdec 
    | 12 -> NONTERM_typealiasdec 
    | 13 -> NONTERM_moduleNameDec 
    | 14 -> NONTERM_fundec 
    | 15 -> NONTERM_fundec 
    | 16 -> NONTERM_funargList 
    | 17 -> NONTERM_funargList 
    | 18 -> NONTERM_funargList 
    | 19 -> NONTERM_tycapvars 
    | 20 -> NONTERM_tycapvars 
    | 21 -> NONTERM_idList 
    | 22 -> NONTERM_idList 
    | 23 -> NONTERM_idList 
    | 24 -> NONTERM_tycapExprs 
    | 25 -> NONTERM_tycapExprs 
    | 26 -> NONTERM_tyExprs 
    | 27 -> NONTERM_tyExprs 
    | 28 -> NONTERM_tyExprs 
    | 29 -> NONTERM_capExprs 
    | 30 -> NONTERM_capExprs 
    | 31 -> NONTERM_capExprs 
    | 32 -> NONTERM_recorddec 
    | 33 -> NONTERM_recorddec 
    | 34 -> NONTERM_recordList 
    | 35 -> NONTERM_recordList 
    | 36 -> NONTERM_recordList 
    | 37 -> NONTERM_uniondec 
    | 38 -> NONTERM_uniondec 
    | 39 -> NONTERM_valueConList 
    | 40 -> NONTERM_valueConList 
    | 41 -> NONTERM_valueConList 
    | 42 -> NONTERM_valueCon 
    | 43 -> NONTERM_expr 
    | 44 -> NONTERM_expr 
    | 45 -> NONTERM_expr 
    | 46 -> NONTERM_expr 
    | 47 -> NONTERM_expr 
    | 48 -> NONTERM_expr 
    | 49 -> NONTERM_expr 
    | 50 -> NONTERM_expr 
    | 51 -> NONTERM_expr 
    | 52 -> NONTERM_expr 
    | 53 -> NONTERM_expr 
    | 54 -> NONTERM_expr 
    | 55 -> NONTERM_expr 
    | 56 -> NONTERM_expr 
    | 57 -> NONTERM_expr 
    | 58 -> NONTERM_expr 
    | 59 -> NONTERM_expr 
    | 60 -> NONTERM_expr 
    | 61 -> NONTERM_expr 
    | 62 -> NONTERM_expr 
    | 63 -> NONTERM_expr 
    | 64 -> NONTERM_expr 
    | 65 -> NONTERM_expr 
    | 66 -> NONTERM_expr 
    | 67 -> NONTERM_expr 
    | 68 -> NONTERM_expr 
    | 69 -> NONTERM_expr 
    | 70 -> NONTERM_expr 
    | 71 -> NONTERM_expr 
    | 72 -> NONTERM_expr 
    | 73 -> NONTERM_expr 
    | 74 -> NONTERM_expr 
    | 75 -> NONTERM_expr 
    | 76 -> NONTERM_expr 
    | 77 -> NONTERM_expr 
    | 78 -> NONTERM_expr 
    | 79 -> NONTERM_expr 
    | 80 -> NONTERM_expr 
    | 81 -> NONTERM_expr 
    | 82 -> NONTERM_expr 
    | 83 -> NONTERM_expr 
    | 84 -> NONTERM_caseClauseList 
    | 85 -> NONTERM_caseClauseList 
    | 86 -> NONTERM_pattern 
    | 87 -> NONTERM_pattern 
    | 88 -> NONTERM_pattern 
    | 89 -> NONTERM_pattern 
    | 90 -> NONTERM_pattern 
    | 91 -> NONTERM_pattern 
    | 92 -> NONTERM_valConPatternList 
    | 93 -> NONTERM_valConPatternList 
    | 94 -> NONTERM_valConPatternList 
    | 95 -> NONTERM_recPatternList 
    | 96 -> NONTERM_recPatternList 
    | 97 -> NONTERM_recPatternList 
    | 98 -> NONTERM_elifList 
    | 99 -> NONTERM_elifList 
    | 100 -> NONTERM_elifList 
    | 101 -> NONTERM_seqExprList 
    | 102 -> NONTERM_seqExprList 
    | 103 -> NONTERM_callExprList 
    | 104 -> NONTERM_callExprList 
    | 105 -> NONTERM_callExprList 
    | 106 -> NONTERM_tyexpr 
    | 107 -> NONTERM_tyexpr 
    | 108 -> NONTERM_tyexpr 
    | 109 -> NONTERM_tyexpr 
    | 110 -> NONTERM_nonEmptyTyExprList 
    | 111 -> NONTERM_nonEmptyTyExprList 
    | 112 -> NONTERM_tyexprList 
    | 113 -> NONTERM_tyexprList 
    | 114 -> NONTERM_tyexprList 
    | 115 -> NONTERM_capexpr 
    | 116 -> NONTERM_capexpr 
    | 117 -> NONTERM_capexpr 
    | 118 -> NONTERM_capexpr 
    | 119 -> NONTERM_capexpr 
    | 120 -> NONTERM_capexpr 
    | 121 -> NONTERM_moduleQualifier 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 60 
let _fsyacc_tagOfErrorTerminal = 58

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DOT  -> "DOT" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | UNIT  -> "UNIT" 
  | LTHANEQ  -> "LTHANEQ" 
  | GTHANEQ  -> "GTHANEQ" 
  | LTHAN  -> "LTHAN" 
  | GTHAN  -> "GTHAN" 
  | EQUAL  -> "EQUAL" 
  | NOTEQUAL  -> "NOTEQUAL" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | TYPE  -> "TYPE" 
  | OF  -> "OF" 
  | CASE  -> "CASE" 
  | TILDE  -> "TILDE" 
  | TICK  -> "TICK" 
  | PIPE  -> "PIPE" 
  | AMPERSAND  -> "AMPERSAND" 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | NOT  -> "NOT" 
  | DIVIDE  -> "DIVIDE" 
  | TIMES  -> "TIMES" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | MOD  -> "MOD" 
  | COMMA  -> "COMMA" 
  | RCURLYBRACE  -> "RCURLYBRACE" 
  | LCURLYBRACE  -> "LCURLYBRACE" 
  | RBRACK  -> "RBRACK" 
  | LBRACK  -> "LBRACK" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | FOR  -> "FOR" 
  | VAR  -> "VAR" 
  | LET  -> "LET" 
  | DO  -> "DO" 
  | WHILE  -> "WHILE" 
  | ELIF  -> "ELIF" 
  | ELSE  -> "ELSE" 
  | THEN  -> "THEN" 
  | IF  -> "IF" 
  | FUN  -> "FUN" 
  | BREAK  -> "BREAK" 
  | MODULE  -> "MODULE" 
  | EXPORT  -> "EXPORT" 
  | OPEN  -> "OPEN" 
  | END  -> "END" 
  | RETURN  -> "RETURN" 
  | RECORD  -> "RECORD" 
  | ALIAS  -> "ALIAS" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | UNIT  -> (null : System.Object) 
  | LTHANEQ  -> (null : System.Object) 
  | GTHANEQ  -> (null : System.Object) 
  | LTHAN  -> (null : System.Object) 
  | GTHAN  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOTEQUAL  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | TILDE  -> (null : System.Object) 
  | TICK  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | AMPERSAND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | RCURLYBRACE  -> (null : System.Object) 
  | LCURLYBRACE  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | ELIF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | MODULE  -> (null : System.Object) 
  | EXPORT  -> (null : System.Object) 
  | OPEN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | RECORD  -> (null : System.Object) 
  | ALIAS  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 3us; 4us; 2us; 65535us; 0us; 3us; 3us; 3us; 2us; 65535us; 0us; 6us; 3us; 6us; 2us; 65535us; 0us; 10us; 3us; 10us; 2us; 65535us; 0us; 5us; 3us; 5us; 2us; 65535us; 0us; 7us; 3us; 7us; 4us; 65535us; 30us; 31us; 38us; 39us; 45us; 46us; 207us; 208us; 3us; 65535us; 20us; 21us; 35us; 36us; 67us; 68us; 6us; 65535us; 12us; 13us; 20us; 47us; 35us; 47us; 48us; 49us; 51us; 52us; 67us; 47us; 1us; 65535us; 132us; 133us; 2us; 65535us; 57us; 58us; 132us; 53us; 2us; 65535us; 54us; 55us; 60us; 61us; 2us; 65535us; 0us; 8us; 3us; 8us; 3us; 65535us; 64us; 65us; 71us; 72us; 76us; 77us; 2us; 65535us; 0us; 9us; 3us; 9us; 3us; 65535us; 63us; 78us; 70us; 79us; 81us; 82us; 3us; 65535us; 63us; 80us; 70us; 80us; 81us; 80us; 46us; 65535us; 33us; 34us; 41us; 42us; 128us; 127us; 135us; 127us; 138us; 87us; 140us; 126us; 143us; 88us; 144us; 89us; 149us; 90us; 152us; 91us; 155us; 92us; 158us; 93us; 159us; 94us; 161us; 95us; 162us; 96us; 163us; 97us; 164us; 98us; 166us; 99us; 168us; 100us; 171us; 101us; 172us; 102us; 175us; 103us; 178us; 104us; 184us; 105us; 185us; 106us; 186us; 107us; 187us; 108us; 188us; 109us; 189us; 110us; 190us; 111us; 193us; 112us; 197us; 113us; 198us; 114us; 199us; 115us; 200us; 116us; 201us; 117us; 203us; 118us; 204us; 119us; 211us; 120us; 214us; 121us; 220us; 122us; 240us; 123us; 242us; 124us; 243us; 125us; 246us; 126us; 248us; 127us; 2us; 65535us; 195us; 221us; 215us; 216us; 5us; 65535us; 195us; 218us; 215us; 218us; 226us; 232us; 233us; 232us; 236us; 237us; 2us; 65535us; 226us; 227us; 233us; 234us; 2us; 65535us; 229us; 230us; 238us; 239us; 2us; 65535us; 89us; 146us; 125us; 245us; 2us; 65535us; 140us; 141us; 246us; 247us; 3us; 65535us; 128us; 129us; 135us; 136us; 248us; 249us; 22us; 65535us; 18us; 19us; 23us; 24us; 27us; 28us; 30us; 43us; 38us; 43us; 45us; 43us; 57us; 56us; 64us; 74us; 71us; 74us; 76us; 74us; 84us; 267us; 132us; 56us; 147us; 150us; 153us; 156us; 205us; 206us; 207us; 43us; 251us; 264us; 255us; 264us; 258us; 267us; 262us; 263us; 265us; 264us; 268us; 267us; 3us; 65535us; 251us; 252us; 255us; 256us; 265us; 266us; 3us; 65535us; 84us; 85us; 258us; 259us; 268us; 269us; 6us; 65535us; 54us; 59us; 60us; 59us; 276us; 272us; 277us; 273us; 278us; 274us; 279us; 275us; 68us; 65535us; 18us; 250us; 23us; 250us; 27us; 250us; 30us; 250us; 33us; 174us; 38us; 250us; 41us; 174us; 45us; 250us; 57us; 250us; 64us; 250us; 71us; 250us; 76us; 250us; 84us; 250us; 128us; 174us; 132us; 250us; 135us; 174us; 138us; 174us; 140us; 174us; 143us; 174us; 144us; 174us; 147us; 250us; 149us; 174us; 152us; 174us; 153us; 250us; 155us; 174us; 158us; 174us; 159us; 174us; 161us; 174us; 162us; 174us; 163us; 174us; 164us; 174us; 166us; 174us; 168us; 174us; 171us; 174us; 172us; 174us; 175us; 174us; 178us; 174us; 184us; 174us; 185us; 174us; 186us; 174us; 187us; 174us; 188us; 174us; 189us; 174us; 190us; 174us; 193us; 174us; 197us; 174us; 198us; 174us; 199us; 174us; 200us; 174us; 201us; 174us; 203us; 174us; 204us; 174us; 205us; 250us; 207us; 250us; 211us; 174us; 214us; 174us; 220us; 174us; 240us; 174us; 242us; 174us; 243us; 174us; 246us; 174us; 248us; 174us; 251us; 250us; 255us; 250us; 258us; 250us; 262us; 250us; 265us; 250us; 268us; 250us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 12us; 15us; 18us; 21us; 26us; 30us; 37us; 39us; 42us; 45us; 48us; 52us; 55us; 59us; 63us; 110us; 113us; 119us; 122us; 125us; 128us; 131us; 135us; 158us; 162us; 166us; 173us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 6us; 11us; 12us; 32us; 33us; 37us; 38us; 2us; 11us; 12us; 2us; 11us; 12us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 2us; 14us; 15us; 2us; 14us; 15us; 2us; 14us; 15us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 19us; 14us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 19us; 15us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 2us; 16us; 17us; 2us; 16us; 17us; 1us; 16us; 1us; 16us; 2us; 19us; 20us; 1us; 19us; 1us; 19us; 2us; 21us; 22us; 1us; 21us; 1us; 21us; 2us; 24us; 25us; 1us; 24us; 1us; 24us; 2us; 26us; 27us; 1us; 26us; 1us; 26us; 6us; 29us; 30us; 117us; 118us; 119us; 120us; 1us; 29us; 1us; 29us; 4us; 32us; 33us; 37us; 38us; 2us; 32us; 37us; 1us; 32us; 1us; 32us; 1us; 32us; 2us; 33us; 38us; 2us; 33us; 38us; 2us; 33us; 38us; 2us; 33us; 38us; 1us; 33us; 1us; 33us; 1us; 33us; 2us; 34us; 35us; 2us; 34us; 35us; 1us; 34us; 1us; 34us; 1us; 37us; 1us; 38us; 2us; 39us; 40us; 1us; 39us; 1us; 39us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 42us; 19us; 43us; 45us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 20us; 43us; 45us; 47us; 48us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 20us; 43us; 45us; 47us; 48us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 49us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 50us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 51us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 52us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 53us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 54us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 54us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 54us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 54us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 55us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 55us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 56us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 56us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 58us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 59us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 73us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 74us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 75us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 76us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 77us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 78us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 83us; 20us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 84us; 85us; 19us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 98us; 20us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 99us; 100us; 20us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 99us; 100us; 20us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 101us; 102us; 20us; 43us; 45us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 103us; 104us; 1us; 43us; 1us; 43us; 1us; 43us; 4us; 44us; 53us; 80us; 121us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 46us; 2us; 47us; 48us; 2us; 47us; 48us; 1us; 47us; 1us; 48us; 2us; 49us; 50us; 4us; 49us; 107us; 109us; 121us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 50us; 2us; 51us; 52us; 4us; 51us; 107us; 109us; 121us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 54us; 1us; 54us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 59us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 71us; 1us; 71us; 1us; 72us; 2us; 72us; 84us; 1us; 72us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 2us; 76us; 78us; 1us; 77us; 1us; 77us; 1us; 78us; 1us; 79us; 1us; 79us; 1us; 79us; 1us; 79us; 1us; 79us; 1us; 79us; 1us; 79us; 1us; 81us; 1us; 82us; 1us; 83us; 1us; 83us; 1us; 83us; 1us; 83us; 2us; 84us; 85us; 2us; 84us; 85us; 2us; 84us; 85us; 1us; 84us; 1us; 86us; 1us; 87us; 3us; 88us; 90us; 91us; 1us; 89us; 1us; 90us; 1us; 90us; 1us; 90us; 1us; 91us; 1us; 91us; 1us; 91us; 2us; 92us; 93us; 1us; 92us; 1us; 92us; 2us; 95us; 96us; 2us; 95us; 96us; 2us; 95us; 96us; 1us; 95us; 1us; 95us; 1us; 98us; 1us; 98us; 2us; 99us; 100us; 2us; 99us; 100us; 1us; 99us; 1us; 100us; 1us; 101us; 1us; 101us; 1us; 103us; 1us; 103us; 1us; 106us; 1us; 106us; 1us; 106us; 1us; 106us; 3us; 107us; 109us; 121us; 1us; 107us; 1us; 107us; 1us; 107us; 1us; 108us; 1us; 108us; 1us; 108us; 1us; 108us; 1us; 108us; 1us; 108us; 2us; 110us; 111us; 1us; 110us; 1us; 110us; 2us; 112us; 113us; 1us; 112us; 1us; 112us; 1us; 115us; 1us; 116us; 5us; 117us; 117us; 118us; 119us; 120us; 5us; 117us; 118us; 118us; 119us; 120us; 5us; 117us; 118us; 119us; 119us; 120us; 5us; 117us; 118us; 119us; 120us; 120us; 1us; 117us; 1us; 118us; 1us; 119us; 1us; 120us; 1us; 121us; 1us; 121us; 1us; 121us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 37us; 40us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 64us; 67us; 70us; 72us; 74us; 76us; 78us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 132us; 135us; 138us; 140us; 142us; 145us; 147us; 149us; 152us; 154us; 156us; 159us; 161us; 163us; 166us; 168us; 170us; 177us; 179us; 181us; 186us; 189us; 191us; 193us; 195us; 198us; 201us; 204us; 207us; 209us; 211us; 213us; 216us; 219us; 221us; 223us; 225us; 227us; 230us; 232us; 234us; 236us; 238us; 240us; 242us; 262us; 283us; 304us; 324us; 344us; 364us; 384us; 404us; 424us; 444us; 464us; 484us; 504us; 524us; 544us; 564us; 584us; 604us; 624us; 644us; 664us; 684us; 704us; 724us; 744us; 764us; 784us; 804us; 824us; 844us; 864us; 884us; 904us; 924us; 944us; 965us; 985us; 1006us; 1027us; 1048us; 1069us; 1071us; 1073us; 1075us; 1080us; 1082us; 1084us; 1086us; 1088us; 1090us; 1092us; 1094us; 1096us; 1098us; 1100us; 1102us; 1105us; 1108us; 1110us; 1112us; 1115us; 1120us; 1122us; 1124us; 1126us; 1128us; 1131us; 1136us; 1138us; 1140us; 1142us; 1144us; 1146us; 1148us; 1150us; 1152us; 1154us; 1156us; 1158us; 1160us; 1162us; 1164us; 1166us; 1168us; 1170us; 1172us; 1174us; 1176us; 1178us; 1180us; 1182us; 1184us; 1186us; 1188us; 1190us; 1192us; 1194us; 1196us; 1198us; 1200us; 1202us; 1204us; 1206us; 1208us; 1210us; 1212us; 1214us; 1216us; 1219us; 1221us; 1223us; 1225us; 1227us; 1229us; 1232us; 1234us; 1236us; 1238us; 1240us; 1242us; 1244us; 1246us; 1248us; 1250us; 1252us; 1254us; 1256us; 1258us; 1260us; 1262us; 1264us; 1267us; 1270us; 1273us; 1275us; 1277us; 1279us; 1283us; 1285us; 1287us; 1289us; 1291us; 1293us; 1295us; 1297us; 1300us; 1302us; 1304us; 1307us; 1310us; 1313us; 1315us; 1317us; 1319us; 1321us; 1324us; 1327us; 1329us; 1331us; 1333us; 1335us; 1337us; 1339us; 1341us; 1343us; 1345us; 1347us; 1351us; 1353us; 1355us; 1357us; 1359us; 1361us; 1363us; 1365us; 1367us; 1369us; 1372us; 1374us; 1376us; 1379us; 1381us; 1383us; 1385us; 1387us; 1393us; 1399us; 1405us; 1411us; 1413us; 1415us; 1417us; 1419us; 1421us; 1423us; |]
let _fsyacc_action_rows = 283
let _fsyacc_actionTableElements = [|4us; 16387us; 14us; 15us; 45us; 27us; 47us; 25us; 48us; 11us; 0us; 49152us; 0us; 16385us; 4us; 16387us; 14us; 15us; 45us; 27us; 47us; 25us; 48us; 11us; 0us; 16386us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 35us; 12us; 1us; 16407us; 55us; 50us; 1us; 32768us; 34us; 14us; 0us; 16394us; 2us; 32768us; 53us; 16us; 55us; 62us; 1us; 32768us; 55us; 17us; 2us; 32768us; 8us; 20us; 10us; 18us; 2us; 32768us; 35us; 258us; 55us; 254us; 0us; 16395us; 1us; 16407us; 55us; 50us; 1us; 32768us; 9us; 22us; 1us; 32768us; 10us; 23us; 2us; 32768us; 35us; 258us; 55us; 254us; 0us; 16396us; 1us; 32768us; 55us; 26us; 0us; 16397us; 2us; 32768us; 35us; 258us; 55us; 254us; 1us; 32768us; 55us; 29us; 2us; 32768us; 8us; 35us; 35us; 30us; 2us; 16402us; 35us; 258us; 55us; 254us; 1us; 32768us; 34us; 32us; 1us; 32768us; 10us; 33us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 16398us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 1us; 16407us; 55us; 50us; 1us; 32768us; 9us; 37us; 1us; 32768us; 35us; 38us; 2us; 16402us; 35us; 258us; 55us; 254us; 1us; 32768us; 34us; 40us; 1us; 32768us; 10us; 41us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 16399us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 1us; 32768us; 55us; 44us; 1us; 16401us; 29us; 45us; 2us; 16402us; 35us; 258us; 55us; 254us; 0us; 16400us; 1us; 16404us; 12us; 48us; 1us; 16407us; 55us; 50us; 0us; 16403us; 1us; 16406us; 29us; 51us; 1us; 16407us; 55us; 50us; 0us; 16405us; 1us; 16409us; 12us; 54us; 2us; 16415us; 55us; 270us; 57us; 271us; 0us; 16408us; 1us; 16411us; 29us; 57us; 2us; 16412us; 35us; 258us; 55us; 254us; 0us; 16410us; 5us; 16414us; 24us; 278us; 25us; 279us; 26us; 277us; 27us; 276us; 29us; 60us; 2us; 16415us; 55us; 270us; 57us; 271us; 0us; 16413us; 2us; 32768us; 8us; 67us; 10us; 63us; 2us; 16425us; 31us; 64us; 55us; 83us; 2us; 16420us; 35us; 258us; 55us; 254us; 1us; 32768us; 30us; 66us; 0us; 16416us; 1us; 16407us; 55us; 50us; 1us; 32768us; 9us; 69us; 1us; 32768us; 10us; 70us; 2us; 16425us; 31us; 71us; 55us; 83us; 2us; 16420us; 35us; 258us; 55us; 254us; 1us; 32768us; 30us; 73us; 0us; 16417us; 1us; 32768us; 55us; 75us; 1us; 16419us; 12us; 76us; 2us; 16420us; 35us; 258us; 55us; 254us; 0us; 16418us; 0us; 16421us; 0us; 16422us; 1us; 16424us; 19us; 81us; 1us; 16425us; 55us; 83us; 0us; 16423us; 1us; 32768us; 35us; 84us; 2us; 16498us; 35us; 258us; 55us; 254us; 1us; 32768us; 34us; 86us; 0us; 16426us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 32us; 139us; 33us; 138us; 35us; 128us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 43us; 144us; 20us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 41us; 242us; 42us; 240us; 50us; 145us; 16us; 16433us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 16us; 16434us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 16us; 16435us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 16us; 16436us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 16us; 16437us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 12us; 162us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 12us; 163us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 34us; 164us; 35us; 128us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 50us; 165us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 40us; 167us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 34us; 169us; 35us; 128us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 34us; 172us; 35us; 128us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 50us; 173us; 3us; 16442us; 1us; 182us; 33us; 138us; 35us; 128us; 3us; 16443us; 1us; 182us; 33us; 138us; 35us; 128us; 7us; 16448us; 1us; 182us; 20us; 191us; 24us; 187us; 25us; 186us; 28us; 188us; 33us; 138us; 35us; 128us; 7us; 16449us; 1us; 182us; 20us; 191us; 24us; 187us; 25us; 186us; 28us; 188us; 33us; 138us; 35us; 128us; 3us; 16450us; 1us; 182us; 33us; 138us; 35us; 128us; 3us; 16451us; 1us; 182us; 33us; 138us; 35us; 128us; 3us; 16452us; 1us; 182us; 33us; 138us; 35us; 128us; 14us; 16453us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 19us; 194us; 20us; 191us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 14us; 16454us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 19us; 194us; 20us; 191us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 3us; 16455us; 1us; 182us; 33us; 138us; 35us; 128us; 7us; 16456us; 1us; 182us; 20us; 191us; 24us; 187us; 25us; 186us; 28us; 188us; 33us; 138us; 35us; 128us; 10us; 16457us; 1us; 182us; 19us; 194us; 20us; 191us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 10us; 16458us; 1us; 182us; 19us; 194us; 20us; 191us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 10us; 16459us; 1us; 182us; 19us; 194us; 20us; 191us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 10us; 16460us; 1us; 182us; 19us; 194us; 20us; 191us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 16us; 16461us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 10us; 16462us; 1us; 182us; 19us; 194us; 20us; 191us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 10us; 16463us; 1us; 182us; 19us; 194us; 20us; 191us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 15us; 215us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 17us; 16469us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 195us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 50us; 241us; 18us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 43us; 243us; 20us; 32768us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 41us; 242us; 42us; 240us; 50us; 244us; 18us; 16486us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 12us; 246us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 33us; 138us; 35us; 128us; 18us; 16488us; 1us; 182us; 6us; 199us; 7us; 198us; 8us; 201us; 9us; 200us; 10us; 202us; 19us; 194us; 20us; 191us; 21us; 190us; 22us; 189us; 24us; 187us; 25us; 186us; 26us; 185us; 27us; 184us; 28us; 188us; 29us; 248us; 33us; 138us; 35us; 128us; 17us; 16489us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 1us; 32768us; 34us; 130us; 0us; 16427us; 2us; 16464us; 8us; 132us; 13us; 280us; 2us; 16412us; 35us; 258us; 55us; 254us; 1us; 32768us; 9us; 134us; 1us; 32768us; 35us; 135us; 17us; 16489us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 1us; 32768us; 34us; 137us; 0us; 16428us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16429us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 1us; 32768us; 34us; 142us; 0us; 16430us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16431us; 0us; 16432us; 2us; 32768us; 35us; 258us; 55us; 148us; 3us; 16493us; 8us; 255us; 10us; 149us; 13us; 280us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 1us; 32768us; 55us; 151us; 1us; 32768us; 10us; 152us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 2us; 32768us; 35us; 258us; 55us; 154us; 3us; 16493us; 8us; 255us; 10us; 155us; 13us; 280us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 1us; 32768us; 55us; 157us; 1us; 32768us; 10us; 158us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 1us; 32768us; 35us; 161us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16438us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 1us; 32768us; 35us; 168us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16439us; 1us; 32768us; 35us; 171us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16440us; 0us; 16441us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 1us; 32768us; 17us; 177us; 1us; 32768us; 17us; 178us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 1us; 32768us; 55us; 183us; 0us; 16447us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 1us; 32768us; 20us; 192us; 1us; 32768us; 20us; 193us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 1us; 32768us; 19us; 196us; 5us; 32768us; 2us; 225us; 19us; 196us; 55us; 224us; 56us; 223us; 57us; 222us; 1us; 32768us; 19us; 197us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 18us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 9us; 204us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 1us; 32768us; 10us; 203us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 2us; 32768us; 35us; 258us; 55us; 254us; 1us; 32768us; 35us; 207us; 2us; 16402us; 35us; 258us; 55us; 254us; 1us; 32768us; 34us; 209us; 1us; 32768us; 26us; 210us; 1us; 32768us; 9us; 211us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16465us; 0us; 16466us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 4us; 32768us; 2us; 225us; 55us; 224us; 56us; 223us; 57us; 222us; 1us; 32768us; 50us; 217us; 0us; 16467us; 1us; 32768us; 10us; 219us; 1us; 32768us; 9us; 220us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16468us; 0us; 16470us; 0us; 16471us; 2us; 16472us; 31us; 229us; 35us; 226us; 0us; 16473us; 4us; 16478us; 2us; 225us; 55us; 224us; 56us; 223us; 57us; 222us; 1us; 32768us; 34us; 228us; 0us; 16474us; 1us; 16481us; 55us; 235us; 1us; 32768us; 30us; 231us; 0us; 16475us; 1us; 16477us; 29us; 233us; 4us; 16478us; 2us; 225us; 55us; 224us; 56us; 223us; 57us; 222us; 0us; 16476us; 1us; 32768us; 10us; 236us; 4us; 32768us; 2us; 225us; 55us; 224us; 56us; 223us; 57us; 222us; 1us; 16480us; 12us; 238us; 1us; 16481us; 55us; 235us; 0us; 16479us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16482us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16483us; 0us; 16484us; 17us; 32768us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16485us; 17us; 16489us; 3us; 181us; 4us; 180us; 5us; 179us; 16us; 214us; 17us; 176us; 23us; 175us; 35us; 140us; 36us; 160us; 37us; 153us; 38us; 147us; 39us; 166us; 40us; 170us; 44us; 143us; 45us; 205us; 55us; 131us; 56us; 213us; 57us; 212us; 0us; 16487us; 1us; 32768us; 8us; 251us; 2us; 32768us; 35us; 258us; 55us; 254us; 1us; 32768us; 9us; 253us; 0us; 16490us; 2us; 16493us; 8us; 255us; 13us; 280us; 2us; 32768us; 35us; 258us; 55us; 254us; 1us; 32768us; 9us; 257us; 0us; 16491us; 2us; 16498us; 35us; 258us; 55us; 254us; 1us; 32768us; 34us; 260us; 1us; 32768us; 26us; 261us; 1us; 32768us; 9us; 262us; 2us; 32768us; 35us; 258us; 55us; 254us; 0us; 16492us; 1us; 16495us; 29us; 265us; 2us; 32768us; 35us; 258us; 55us; 254us; 0us; 16494us; 1us; 16497us; 29us; 268us; 2us; 16498us; 35us; 258us; 55us; 254us; 0us; 16496us; 0us; 16499us; 0us; 16500us; 2us; 16501us; 24us; 278us; 25us; 279us; 2us; 16502us; 24us; 278us; 25us; 279us; 0us; 16503us; 0us; 16504us; 2us; 32768us; 55us; 270us; 57us; 271us; 2us; 32768us; 55us; 270us; 57us; 271us; 2us; 32768us; 55us; 270us; 57us; 271us; 2us; 32768us; 55us; 270us; 57us; 271us; 1us; 32768us; 13us; 281us; 1us; 32768us; 55us; 282us; 0us; 16505us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 7us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 21us; 23us; 25us; 26us; 29us; 31us; 34us; 37us; 38us; 40us; 42us; 44us; 47us; 48us; 50us; 51us; 54us; 56us; 59us; 62us; 64us; 66us; 84us; 102us; 104us; 106us; 108us; 111us; 113us; 115us; 133us; 151us; 153us; 155us; 158us; 159us; 161us; 163us; 164us; 166us; 168us; 169us; 171us; 174us; 175us; 177us; 180us; 181us; 187us; 190us; 191us; 194us; 197us; 200us; 202us; 203us; 205us; 207us; 209us; 212us; 215us; 217us; 218us; 220us; 222us; 225us; 226us; 227us; 228us; 230us; 232us; 233us; 235us; 238us; 240us; 241us; 260us; 279us; 300us; 317us; 334us; 351us; 368us; 385us; 404us; 423us; 442us; 461us; 480us; 499us; 518us; 537us; 541us; 545us; 553us; 561us; 565us; 569us; 573us; 588us; 603us; 607us; 615us; 626us; 637us; 648us; 659us; 676us; 687us; 698us; 717us; 735us; 754us; 773us; 794us; 813us; 832us; 850us; 852us; 853us; 856us; 859us; 861us; 863us; 881us; 883us; 884us; 902us; 903us; 921us; 923us; 924us; 942us; 960us; 961us; 962us; 965us; 969us; 987us; 989us; 991us; 1009us; 1012us; 1016us; 1034us; 1036us; 1038us; 1056us; 1074us; 1076us; 1094us; 1112us; 1130us; 1148us; 1149us; 1167us; 1169us; 1187us; 1188us; 1190us; 1208us; 1226us; 1227us; 1228us; 1246us; 1248us; 1250us; 1268us; 1269us; 1270us; 1271us; 1273us; 1274us; 1292us; 1310us; 1328us; 1346us; 1364us; 1382us; 1400us; 1402us; 1404us; 1422us; 1424us; 1430us; 1432us; 1450us; 1468us; 1486us; 1504us; 1523us; 1525us; 1543us; 1561us; 1564us; 1566us; 1569us; 1571us; 1573us; 1575us; 1593us; 1594us; 1595us; 1613us; 1618us; 1620us; 1621us; 1623us; 1625us; 1643us; 1644us; 1645us; 1646us; 1649us; 1650us; 1655us; 1657us; 1658us; 1660us; 1662us; 1663us; 1665us; 1670us; 1671us; 1673us; 1678us; 1680us; 1682us; 1683us; 1701us; 1702us; 1720us; 1738us; 1739us; 1740us; 1758us; 1759us; 1777us; 1778us; 1780us; 1783us; 1785us; 1786us; 1789us; 1792us; 1794us; 1795us; 1798us; 1800us; 1802us; 1804us; 1807us; 1808us; 1810us; 1813us; 1814us; 1816us; 1819us; 1820us; 1821us; 1822us; 1825us; 1828us; 1829us; 1830us; 1833us; 1836us; 1839us; 1842us; 1844us; 1846us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 5us; 8us; 2us; 8us; 11us; 4us; 2us; 0us; 3us; 1us; 3us; 1us; 0us; 3us; 1us; 3us; 1us; 0us; 3us; 1us; 0us; 6us; 9us; 4us; 2us; 0us; 4us; 7us; 3us; 1us; 0us; 4us; 4us; 7us; 4us; 3us; 5us; 5us; 4us; 5us; 4us; 5us; 3us; 10us; 6us; 6us; 1us; 2us; 4us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 5us; 3us; 3us; 3us; 3us; 4us; 4us; 8us; 1us; 1us; 1us; 5us; 6us; 4us; 1us; 1us; 1us; 1us; 4us; 4us; 3us; 1us; 0us; 5us; 3us; 0us; 3us; 5us; 5us; 3us; 1us; 3us; 1us; 0us; 4us; 4us; 6us; 1us; 3us; 1us; 3us; 1us; 0us; 1us; 1us; 3us; 3us; 3us; 3us; 4us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 5us; 5us; 6us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 21us; 21us; 21us; 21us; 22us; 22us; 22us; 23us; 23us; 23us; 24us; 24us; 24us; 25us; 25us; 26us; 26us; 26us; 27us; 27us; 27us; 27us; 28us; 28us; 29us; 29us; 29us; 30us; 30us; 30us; 30us; 30us; 30us; 31us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 16403us; 65535us; 65535us; 16405us; 65535us; 65535us; 16408us; 65535us; 65535us; 16410us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 16418us; 16421us; 16422us; 65535us; 65535us; 16423us; 65535us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16427us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16428us; 65535us; 16429us; 65535us; 65535us; 16430us; 65535us; 65535us; 16431us; 16432us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16438us; 65535us; 65535us; 65535us; 16439us; 65535us; 65535us; 65535us; 16440us; 16441us; 65535us; 65535us; 65535us; 65535us; 16444us; 16445us; 16446us; 65535us; 16447us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16465us; 16466us; 65535us; 65535us; 65535us; 16467us; 65535us; 65535us; 65535us; 16468us; 16470us; 16471us; 65535us; 16473us; 65535us; 65535us; 16474us; 65535us; 65535us; 16475us; 65535us; 65535us; 16476us; 65535us; 65535us; 65535us; 65535us; 16479us; 65535us; 16482us; 65535us; 65535us; 16483us; 16484us; 65535us; 16485us; 65535us; 16487us; 65535us; 65535us; 65535us; 16490us; 65535us; 65535us; 65535us; 16491us; 65535us; 65535us; 65535us; 65535us; 65535us; 16492us; 65535us; 65535us; 16494us; 65535us; 65535us; 16496us; 16499us; 16500us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16505us; |]
let _fsyacc_reductions ()  =    [| 
# 559 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Module )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 568 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'declarationList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                           Module (_1) 
                   )
# 83 "Parser.fsy"
                 :  Module ));
# 579 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'declaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'declarationList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                        _1 :: _2 
                   )
# 86 "Parser.fsy"
                 : 'declarationList));
# 591 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                        [] 
                   )
# 87 "Parser.fsy"
                 : 'declarationList));
# 601 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleNameDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                           _1 
                   )
# 90 "Parser.fsy"
                 : 'declaration));
# 612 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exports)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                           _1 
                   )
# 91 "Parser.fsy"
                 : 'declaration));
# 623 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                           _1 
                   )
# 92 "Parser.fsy"
                 : 'declaration));
# 634 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recorddec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                           _1 
                   )
# 93 "Parser.fsy"
                 : 'declaration));
# 645 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'uniondec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                           _1 
                   )
# 94 "Parser.fsy"
                 : 'declaration));
# 656 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typealiasdec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                           _1 
                   )
# 95 "Parser.fsy"
                 : 'declaration));
# 667 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'idList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                       Export _3 
                   )
# 98 "Parser.fsy"
                 : 'exports));
# 678 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                      TypeAliasDec {name=_3; originalTy=_5; template=None} 
                   )
# 101 "Parser.fsy"
                 : 'typealiasdec));
# 690 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tycapvars)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                                            TypeAliasDec {name=_3; originalTy=_8; template=Some _5} 
                   )
# 102 "Parser.fsy"
                 : 'typealiasdec));
# 703 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                 ModuleNameDec _2 
                   )
# 105 "Parser.fsy"
                 : 'moduleNameDec));
# 714 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'funargList)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                                             FunctionDec {name=_3; template=None; clause=FunctionClause {arguments=_5; body=_8}; returnTy=_2 } 
                   )
# 108 "Parser.fsy"
                 : 'fundec));
# 728 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tycapvars)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'funargList)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                                                                   FunctionDec {name=_3; template=Some _5; clause=FunctionClause {arguments=_8; body=_11}; returnTy=_2}
                   )
# 109 "Parser.fsy"
                 : 'fundec));
# 743 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'funargList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                      (_1,_2) :: _4
                   )
# 112 "Parser.fsy"
                 : 'funargList));
# 756 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                      [(_1,_2)]
                   )
# 113 "Parser.fsy"
                 : 'funargList));
# 768 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                      []
                   )
# 114 "Parser.fsy"
                 : 'funargList));
# 778 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'idList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'idList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                    Template {tyVars=_1; capVars=_3} 
                   )
# 117 "Parser.fsy"
                 : 'tycapvars));
# 790 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'idList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                    Template {tyVars=_1; capVars=[]} 
                   )
# 118 "Parser.fsy"
                 : 'tycapvars));
# 801 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'idList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                   _1::_3 
                   )
# 121 "Parser.fsy"
                 : 'idList));
# 813 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                   [_1] 
                   )
# 122 "Parser.fsy"
                 : 'idList));
# 824 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                   [] 
                   )
# 123 "Parser.fsy"
                 : 'idList));
# 834 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyExprs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'capExprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                     TemplateApply {tyExprs=_1; capExprs=_3}
                   )
# 126 "Parser.fsy"
                 : 'tycapExprs));
# 846 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyExprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                     TemplateApply {tyExprs=_1; capExprs=[]}
                   )
# 127 "Parser.fsy"
                 : 'tycapExprs));
# 857 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyExprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                               _1::_3
                   )
# 130 "Parser.fsy"
                 : 'tyExprs));
# 869 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                               [_1]
                   )
# 131 "Parser.fsy"
                 : 'tyExprs));
# 880 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                [] 
                   )
# 132 "Parser.fsy"
                 : 'tyExprs));
# 890 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'capexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'capExprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                   _1::_3 
                   )
# 135 "Parser.fsy"
                 : 'capExprs));
# 902 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'capexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                   [_1] 
                   )
# 136 "Parser.fsy"
                 : 'capExprs));
# 913 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                   [] 
                   )
# 137 "Parser.fsy"
                 : 'capExprs));
# 923 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'recordList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                                                                  RecordDec {name=_2; fields=_5; template=None}
                   )
# 140 "Parser.fsy"
                 : 'recorddec));
# 935 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tycapvars)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'recordList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                                                                  RecordDec {name=_2; fields=_8; template=Some _4}
                   )
# 141 "Parser.fsy"
                 : 'recorddec));
# 948 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'recordList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                          (_1, _2) :: _4
                   )
# 144 "Parser.fsy"
                 : 'recordList));
# 961 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                          [(_1, _2)]
                   )
# 145 "Parser.fsy"
                 : 'recordList));
# 973 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                          []
                   )
# 146 "Parser.fsy"
                 : 'recordList));
# 983 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueConList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                                                            UnionDec {name=_2; valCons=_4; template=None} 
                   )
# 149 "Parser.fsy"
                 : 'uniondec));
# 995 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tycapvars)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueConList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                                            UnionDec {name=_2; valCons=_7; template=Some _4}
                   )
# 150 "Parser.fsy"
                 : 'uniondec));
# 1008 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueCon)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueConList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                     _1 :: _3
                   )
# 153 "Parser.fsy"
                 : 'valueConList));
# 1020 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueCon)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                     [_1]
                   )
# 154 "Parser.fsy"
                 : 'valueConList));
# 1031 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                     []
                   )
# 155 "Parser.fsy"
                 : 'valueConList));
# 1041 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                                      (_1, _3)
                   )
# 158 "Parser.fsy"
                 : 'valueCon));
# 1053 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'callExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                             CallExp {func=_1; templateArgs=None; args=_3}
                   )
# 161 "Parser.fsy"
                 : 'expr));
# 1065 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tycapExprs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'callExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                                                CallExp {func=VarExp {name=_1}; templateArgs=Some _3; args=_6} 
                   )
# 162 "Parser.fsy"
                 : 'expr));
# 1078 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                            ArrayAccessExp {array=_1; index=_3}
                   )
# 163 "Parser.fsy"
                 : 'expr));
# 1090 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seqExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                            SequenceExp {exps=_2}
                   )
# 164 "Parser.fsy"
                 : 'expr));
# 1101 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                            IfElseExp {condition=_2; trueBranch=_4; falseBranch=UnitExp}
                   )
# 165 "Parser.fsy"
                 : 'expr));
# 1113 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'elifList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                                            IfElseExp {condition=_2; trueBranch=_4; falseBranch=_5}
                   )
# 166 "Parser.fsy"
                 : 'expr));
# 1126 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                            DecLetExp { varName=_2; typ=None; right=_4 }
                   )
# 167 "Parser.fsy"
                 : 'expr));
# 1138 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                            DecLetExp { varName=_3; typ=Some _2; right=_5 }
                   )
# 168 "Parser.fsy"
                 : 'expr));
# 1151 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                                            DecVarExp { varName=_2; typ=None; right=_4}
                   )
# 169 "Parser.fsy"
                 : 'expr));
# 1163 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                            DecVarExp { varName=_3; typ=Some _2; right=_5}
                   )
# 170 "Parser.fsy"
                 : 'expr));
# 1176 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                            AssignExp { left=VarMutation{varName=_1}; right=_3}
                   )
# 171 "Parser.fsy"
                 : 'expr));
# 1188 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                                                        ForLoopExp { init=_3; condition=_5; afterthought=_7 }
                   )
# 172 "Parser.fsy"
                 : 'expr));
# 1202 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                            DoWhileLoopExp {condition=_5; body=_2}
                   )
# 173 "Parser.fsy"
                 : 'expr));
# 1214 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                            WhileLoopExp {condition=_3; body=_5}
                   )
# 174 "Parser.fsy"
                 : 'expr));
# 1226 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleQualifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                            ModQualifierExp _1
                   )
# 175 "Parser.fsy"
                 : 'expr));
# 1237 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                                                            UnaryOpExp {op=LogicalNot; exp=_2}
                   )
# 176 "Parser.fsy"
                 : 'expr));
# 1248 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                            UnaryOpExp {op=BitwiseNot; exp=_4}
                   )
# 177 "Parser.fsy"
                 : 'expr));
# 1259 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                            UnitExp
                   )
# 178 "Parser.fsy"
                 : 'expr));
# 1269 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                            TrueExp
                   )
# 179 "Parser.fsy"
                 : 'expr));
# 1279 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                                            FalseExp
                   )
# 180 "Parser.fsy"
                 : 'expr));
# 1289 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                            RecordAccessExp {record=_1; fieldName=_3}
                   )
# 181 "Parser.fsy"
                 : 'expr));
# 1301 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                            BinaryOpExp {op=Add; left=_1; right=_3}
                   )
# 182 "Parser.fsy"
                 : 'expr));
# 1313 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                            BinaryOpExp {op=Subtract; left=_1; right=_3}
                   )
# 183 "Parser.fsy"
                 : 'expr));
# 1325 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                                            BinaryOpExp {op=Multiply; left=_1; right=_3}
                   )
# 184 "Parser.fsy"
                 : 'expr));
# 1337 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                                                            BinaryOpExp {op=Divide; left=_1; right=_3}
                   )
# 185 "Parser.fsy"
                 : 'expr));
# 1349 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                            BinaryOpExp {op=Modulo; left=_1; right=_3}
                   )
# 186 "Parser.fsy"
                 : 'expr));
# 1361 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                                            BinaryOpExp {op=LogicalAnd; left=_1; right=_3}
                   )
# 187 "Parser.fsy"
                 : 'expr));
# 1373 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "Parser.fsy"
                                                            BinaryOpExp {op=LogicalOr; left=_1; right=_3}
                   )
# 188 "Parser.fsy"
                 : 'expr));
# 1385 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                                                  BinaryOpExp {op=BitwiseAnd; left=_1; right=_5}
                   )
# 189 "Parser.fsy"
                 : 'expr));
# 1397 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                                            BinaryOpExp {op=BitwiseOr; left=_1; right=_5}
                   )
# 190 "Parser.fsy"
                 : 'expr));
# 1409 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                                            BinaryOpExp {op=GreaterOrEqual; left=_1; right=_3}
                   )
# 191 "Parser.fsy"
                 : 'expr));
# 1421 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                                                            BinaryOpExp {op=LessOrEqual; left=_1; right=_3}
                   )
# 192 "Parser.fsy"
                 : 'expr));
# 1433 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                            BinaryOpExp {op=Greater; left=_1; right=_3}
                   )
# 193 "Parser.fsy"
                 : 'expr));
# 1445 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                                                            BinaryOpExp {op=Less; left=_1; right=_3}
                   )
# 194 "Parser.fsy"
                 : 'expr));
# 1457 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "Parser.fsy"
                                                            printfn "alpha"; BinaryOpExp {op=Equal; left=_1; right=_4}
                   )
# 195 "Parser.fsy"
                 : 'expr));
# 1469 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                                            BinaryOpExp {op=NotEqual; left=_1; right=_4}
                   )
# 196 "Parser.fsy"
                 : 'expr));
# 1481 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'funargList)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "Parser.fsy"
                                                                                LambdaExp {clause=FunctionClause {arguments=_4; body=_8}; returnTy=_2 }
                   )
# 197 "Parser.fsy"
                 : 'expr));
# 1494 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                                            VarExp {name=_1}
                   )
# 198 "Parser.fsy"
                 : 'expr));
# 1505 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "Parser.fsy"
                                                             IntExp _1 
                   )
# 199 "Parser.fsy"
                 : 'expr));
# 1516 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                                             FloatExp _1 
                   )
# 200 "Parser.fsy"
                 : 'expr));
# 1527 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'caseClauseList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                                             CaseExp {on=_2; clauses=_4}
                   )
# 201 "Parser.fsy"
                 : 'expr));
# 1539 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pattern)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'caseClauseList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                                                                       (_1, _4) :: _6
                   )
# 204 "Parser.fsy"
                 : 'caseClauseList));
# 1552 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pattern)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                                                       [(_1, _4)]
                   )
# 205 "Parser.fsy"
                 : 'caseClauseList));
# 1564 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                                                                     MatchIntVal _1
                   )
# 208 "Parser.fsy"
                 : 'pattern));
# 1575 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "Parser.fsy"
                                                                     MatchFloatVal _1
                   )
# 209 "Parser.fsy"
                 : 'pattern));
# 1586 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "Parser.fsy"
                                                                     MatchVar _1
                   )
# 210 "Parser.fsy"
                 : 'pattern));
# 1597 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "Parser.fsy"
                                                                     MatchUnderscore
                   )
# 211 "Parser.fsy"
                 : 'pattern));
# 1607 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'valConPatternList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "Parser.fsy"
                                                                     MatchValCon (_1, _3)
                   )
# 212 "Parser.fsy"
                 : 'pattern));
# 1619 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recPatternList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "Parser.fsy"
                                                                     MatchRecCon (_1, _3)
                   )
# 213 "Parser.fsy"
                 : 'pattern));
# 1631 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'valConPatternList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "Parser.fsy"
                                                          _1 :: _3
                   )
# 216 "Parser.fsy"
                 : 'valConPatternList));
# 1643 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                                                          [_1]
                   )
# 217 "Parser.fsy"
                 : 'valConPatternList));
# 1654 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "Parser.fsy"
                                                          []
                   )
# 218 "Parser.fsy"
                 : 'valConPatternList));
# 1664 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'pattern)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'recPatternList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "Parser.fsy"
                                                                    (_1, _3) :: _5
                   )
# 221 "Parser.fsy"
                 : 'recPatternList));
# 1677 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'pattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "Parser.fsy"
                                                                    [(_1, _3)]
                   )
# 222 "Parser.fsy"
                 : 'recPatternList));
# 1689 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "Parser.fsy"
                                                                    []
                   )
# 223 "Parser.fsy"
                 : 'recPatternList));
# 1699 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "Parser.fsy"
                                                       _2
                   )
# 226 "Parser.fsy"
                 : 'elifList));
# 1710 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "Parser.fsy"
                                                       IfElseExp {condition=_2; trueBranch=_4; falseBranch=UnitExp}
                   )
# 227 "Parser.fsy"
                 : 'elifList));
# 1722 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'elifList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "Parser.fsy"
                                                       IfElseExp {condition=_2; trueBranch=_4; falseBranch=_5}
                   )
# 228 "Parser.fsy"
                 : 'elifList));
# 1735 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'seqExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                                                     _1::_3
                   )
# 231 "Parser.fsy"
                 : 'seqExprList));
# 1747 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "Parser.fsy"
                                                     [_1]
                   )
# 232 "Parser.fsy"
                 : 'seqExprList));
# 1758 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'callExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "Parser.fsy"
                                                  _1::_3
                   )
# 235 "Parser.fsy"
                 : 'callExprList));
# 1770 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "Parser.fsy"
                                                  [_1]
                   )
# 236 "Parser.fsy"
                 : 'callExprList));
# 1781 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "Parser.fsy"
                                                  []
                   )
# 237 "Parser.fsy"
                 : 'callExprList));
# 1791 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleQualifier)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'nonEmptyTyExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "Parser.fsy"
                                                                         TyApply {tyConstructor=TyModuleQualifier _1; args=_3}
                   )
# 240 "Parser.fsy"
                 : 'tyexpr));
# 1803 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'nonEmptyTyExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "Parser.fsy"
                                                                         TyApply {tyConstructor=TyName _1; args=_3}
                   )
# 241 "Parser.fsy"
                 : 'tyexpr));
# 1815 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexprList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "Parser.fsy"
                                                                         FunTy {args=_2; returnType=_6}
                   )
# 242 "Parser.fsy"
                 : 'tyexpr));
# 1827 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "Parser.fsy"
                                                                         match _1 with
                                                                             | "uint8" -> BaseTy TyUint8
                                                                             | "uint16" -> BaseTy TyUint16
                                                                             | "uint32" -> BaseTy TyUint32
                                                                             | "uint64" -> BaseTy TyUint64
                                                                             | "int8" -> BaseTy TyInt8
                                                                             | "int16" -> BaseTy TyInt16
                                                                             | "int32" -> BaseTy TyInt32
                                                                             | "int64" -> BaseTy TyInt64
                                                                             | "bool" -> BaseTy TyBool
                                                                             | _ -> TyName _1 
                   )
# 243 "Parser.fsy"
                 : 'tyexpr));
# 1848 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'nonEmptyTyExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "Parser.fsy"
                                                          _1::_3
                   )
# 256 "Parser.fsy"
                 : 'nonEmptyTyExprList));
# 1860 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "Parser.fsy"
                                                          [_1]
                   )
# 257 "Parser.fsy"
                 : 'nonEmptyTyExprList));
# 1871 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 260 "Parser.fsy"
                                                  _1::_3
                   )
# 260 "Parser.fsy"
                 : 'tyexprList));
# 1883 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "Parser.fsy"
                                                  [_1]
                   )
# 261 "Parser.fsy"
                 : 'tyexprList));
# 1894 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "Parser.fsy"
                                                  []
                   )
# 262 "Parser.fsy"
                 : 'tyexprList));
# 1904 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 265 "Parser.fsy"
                                                           CapacityNameExpr _1
                   )
# 265 "Parser.fsy"
                 : 'capexpr));
# 1915 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 266 "Parser.fsy"
                                                           CapacityConst _1 
                   )
# 266 "Parser.fsy"
                 : 'capexpr));
# 1926 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'capexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'capexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "Parser.fsy"
                                                  CapacityOp {left=_1; op=CAPPLUS; right=_3} 
                   )
# 267 "Parser.fsy"
                 : 'capexpr));
# 1938 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'capexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'capexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "Parser.fsy"
                                                  CapacityOp {left=_1; op=CAPMINUS; right=_3} 
                   )
# 268 "Parser.fsy"
                 : 'capexpr));
# 1950 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'capexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'capexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 269 "Parser.fsy"
                                                  CapacityOp {left=_1; op=CAPDIVIDE; right=_3} 
                   )
# 269 "Parser.fsy"
                 : 'capexpr));
# 1962 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'capexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'capexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 270 "Parser.fsy"
                                                  CapacityOp {left=_1; op=CAPMULTIPLY; right=_3} 
                   )
# 270 "Parser.fsy"
                 : 'capexpr));
# 1974 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "Parser.fsy"
                                             {module_=_1; name=_4} 
                   )
# 273 "Parser.fsy"
                 : 'moduleQualifier));
|]
# 1987 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 61;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Module  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
