{
module Lexer

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing
open Parser
open System

let newline (lexbuf: LexBuffer<_>) =
  lexbuf.EndPos <- lexbuf.EndPos.NextLine
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf

}

let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule token = parse
| whitespace     { token lexbuf }
| newline        { newline lexbuf; token lexbuf }
| "//"          { comment lexbuf }
| "(*"          { multilineComment lexbuf }
| "=>"          { RFATARROW }
| "alias"       { ALIAS }
| "record"      { RECORD }
| "type"        { TYPE }
| "end"         { END }
| "return"		{ RETURN }
| "export"      { EXPORT }
| "ref"         { REF }
| "open"        { OPEN }
| "module"		{ MODULE }
| "set"         { SET }
| "fun"         { FUN }
| "fn"          { FN }
| "if"			{ IF }
| "then"        { THEN }
| "else"        { ELSE }
| "elif"        { ELIF }
| "while"       { WHILE }
| "do"          { DO }
| "!="          { NOTEQUAL }
| "=="          { DOUBLEEQUAL }
| "let"         { LET }
| "!"           { DEREF }
| "mutable"     { MUTABLE }
| "for"         { FOR }
| "in"          { IN }
| "("           { LPAREN }
| ")"           { RPAREN }
| "["			{ LBRACK }
| "]"			{ RBRACK }
| "{"           { LCURLYBRACE }
| "}"           { RCURLYBRACE }
| ","           { COMMA }
| "mod"         { MOD }
| "array"       { ARRAY }
| "+"			{ PLUS }
| "-"			{ MINUS }
| "*"			{ TIMES }
| "/"           { DIVIDE }
| "not"			{ NOT }
| "and"			{ AND }
| "or"			{ OR }
| "&"			{ AMPERSAND }
| "|"			{ PIPE }
| '"'           { read_string "" false lexbuf }
| "'"           { TICK }
| "~"           { TILDE }
| "case"        { CASE }
| "of"          { OF }
| "type"        { TYPE }
| "<="          { LTHANEQ }
| ">="          { GTHANEQ }
| ":"           { COLON }
| "="           { EQUAL }
| "<"           { LTHAN }
| ">"           { GTHAN }
| "to"          { TO }
| "downto"      { DOWNTO }
| "."           { DOT }
| ";"           { SEMICOLON }
| "_"           { UNDERSCORE }
| "true"        { TRUE }
| "false"       { FALSE }
| ("#" [^'#']* "#") {INLINECODE (lexeme lexbuf)}
| ['-']?digit+   { INT (lexeme lexbuf) }
| ['-']?digit+('.'digit+)?(['e''E']digit+)?   { FLOAT (lexeme lexbuf) }
| ['a'-'z' 'A'-'Z' '0'-'9' '_']+     { ID(lexeme lexbuf) }
| eof           { EOF }
| _ { failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }

and read_string str ignorequote =
  parse
  | '"'           { if ignorequote  then (read_string (str+"\\\"") false lexbuf) else STRING (str) }
  | '\\'          { read_string str true lexbuf }
  | [^ '"' '\\']+ { read_string (str+(lexeme lexbuf)) false lexbuf }
  | eof           { raise (Exception ("String is not terminated")) }

and comment =
  parse
  | newline       { newline lexbuf; token lexbuf }
  | _             { comment lexbuf }

and multilineComment =
  parse
  | newline       { newline lexbuf; multilineComment lexbuf }
  | "*)"          { token lexbuf }
  | _             { multilineComment lexbuf }