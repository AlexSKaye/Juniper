<module>            ::= "module" <id> [<declaration> {, <declaration>}];
<declaration>       ::= <open>
                     |  <export>
                     |  <record>
                     |  <type-alias>
                     |  <algebraic-type>
                     |  <function>
                     |  <let>;
<open>              ::= "open" "(" [<id> {"," <id>}] ")";
<export>            ::= "export" "(" [<id> {"," <id>}] ")";
<template-dec>      ::= <id> {"," <id>} [";" <id> {"," <id>}];
<template-apply>    ::= <ty-expr> {"," <ty-expr>} [";" <capacity-expr> {"," <capacity-expr>}];
<record>            ::= "type" <id> ["<" <template-dec> ">"] "=" "{" [<id> ":" <ty-expr> {";" <id> ":" <ty-expr>}] "}";
<type-alias>        ::= "type" <id> ["<" <template-dec> ">"] "=" <ty-expr>;
<algebraic-type>    ::= "type" <id> ["<" <template-dec> ">"] "=" <value-constructor> {"|" <value-constructor>};
<value-constructor> ::= <id> "of" <ty-expr>;
<let>               ::= "let" <id> ":" <ty-expr> "=" <expr>;
<function>          ::= "fun" <id> ["<" <template-dec> ">"] "(" [<id> ":" <ty-expr> {"," <id> ":" <ty-expr>}] ")" ":" <ty-expr> "=" <expr>;
<declaration-ref>   ::= <id> | <module-qualifier>;
<ty-expr>           ::= <declaration-ref> ["<" <template-apply> ">"]
                     |  "(" [<ty-expr> {"," <ty-expr>}] ")" "->" <ty-expr>
                     |  <ty-expr> "[" <capacity-expr> "]"
                     |  <ty-expr> "ref"
                     |  "(" <ty-expr> "*" <ty-expr> [{"*" <ty-expr>}] ")";
<capacity-expr>     ::= <capacity-expr> <capacity-op> <capacity-expr>
                     |  <id>
                     |  <natural-number>;
<capacity-op>       ::= "+" | "-" | "*" | "/";
<module-qualifier>  ::= <id> ":" <id>;
<expr-list>         ::= <expr> {"," <expr>};
<field-assign-list> ::= <id> "=" <expr> {";" <id> "=" <expr>};
<expr>              ::= "()" | "true" | "false" | <number>
                     |  "(" <expr> {";" <expr>} ")"
                     |  "(" <expr> "," <expr> [{"," <expr>}] ")"
                     |  <expr> "(" [<expr-list>] ")"
                     |  <declaration-ref> "<" <template-apply> ">"
                     |  <expr> "[" <expr> "]"
                     |  <expr> <binary-op> <expr>
                     |  "if" <expr> "then" <expr> [{"elif" <expr> "then" <expr>}] ["else" <expr>] "end"
                     |  "let" <pattern> "=" <expr>
                     |  "set" <left-assign> "=" <expr>
                     |  "for" <id> ":" <ty-expr> "in" <expr> "to" <expr> "do" <expr> "end"
                     |  "for" <id> ":" <ty-expr> "in" <expr> "downto" <expr> "do" <expr> "end"
                     |  "do" <expr> "while" <expr> "end"
                     |  "while" <expr> "do" <expr> "end"
                     |  <module-qualifier>
                     |  <id>
                     |  "not" <expr>
                     |  "~~~" <expr>
                     |  <expr> "." <id>
                     |  "fn" "(" [<id> ":" <ty-expr> {"," <id> ":" <ty-expr>}] ")" ":" <ty-expr> "->" <expr>
                     |  "case" <expr> "of" "|" <case-clause> {"|" <case-clause>} "end"
                     |  <declaration-ref> ["<" <template-apply> ">"] "{" [<field-assign-list>] "}"
                     |  "[" <expr-list> "]"
                     |  "ref" <expr>
                     |  "!" <expr>
                     |  "array" <ty-expr> "of" <expr> "end"
                     |  "#" <inline-cpp> "#";
<binary-op>         ::= "+" | "-" | "*" | "/" | "mod" | "and" | "or" | "&&&"
                     |  "|||" | ">=" | "<=" | ">" | "<" | "==" | "!=" | "<<<"
                     |  ">>>";
<left-assign>       ::= <id>
                     |  <module-qualifier>
                     |  <left-assign> "[" <expr> "]"
                     |  <left-assign> "." <id>;
<case-clause>       ::= <pattern> "=>" <expr>;
<pattern>           ::= ["mutable"] <id> [":" <ty-expr>] // CHANGED
                     |  <integer>
                     |  <float>
                     |  "_"
                     |  <declaration-ref> ["<" <ty-expr> {"," <ty-expr>} ">"] "(" <pattern> ")" // CHANGED
                     |  <ty-expr> "{" [<id> "=" <pattern> {"," <id> "=" <pattern>}] "}"
                     |  "(" <pattern> "," <pattern> {"," <pattern>} ")"; // ADDED
